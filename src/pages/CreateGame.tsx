import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';

const CreateGame = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  
  const [gameName, setGameName] = useState('');
  const [setting, setSetting] = useState('');
  const [aiInstructions, setAiInstructions] = useState('');

  const generateRandomName = () => {
    const names = [
      '–¢–µ–Ω–∏ –ø—Ä–æ—à–ª–æ–≥–æ',
      '–ó–∞–±—ã—Ç—ã–π –≥–æ—Ä–æ–¥',
      '–û—Ö–æ—Ç–∞ –Ω–∞ –¥—Ä–∞–∫–æ–Ω–∞',
      '–¢–∞–π–Ω—ã —Å—Ç–∞—Ä–æ–≥–æ –æ—Å–æ–±–Ω—è–∫–∞',
      '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –æ–¥–∏—Å—Å–µ—è',
      '–ü—Ä–æ–∫–ª—è—Ç–∏–µ –Ω–µ–∫—Ä–æ–º–∞–Ω—Ç–∞',
      '–ü—É—Ç—å —Å–∞–º—É—Ä–∞—è',
      '–ö–∏–±–µ—Ä-–ø–∞–Ω–∫ 2084',
      '–ü–∏—Ä–∞—Ç—ã –ö–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è',
      '–í–µ–¥—å–º–∞–∫ –∏–∑ –†–∏–≤–∏–∏'
    ];
    setGameName(names[Math.floor(Math.random() * names.length)]);
  };

  const handleStart = () => {
    if (!gameName.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã',
        variant: 'destructive'
      });
      return;
    }

    if (!setting.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–û–ø–∏—à–∏—Ç–µ —Å–µ—Ç—Ç–∏–Ω–≥ –∏–≥—Ä—ã',
        variant: 'destructive'
      });
      return;
    }

    const gameSettings = {
      name: gameName,
      setting,
      aiInstructions,
      createdAt: new Date().toISOString()
    };

    localStorage.setItem('current-game-settings', JSON.stringify(gameSettings));
    navigate('/story/new');
  };

  return (
    <div className="min-h-screen p-4 py-12">
      <div className="max-w-3xl mx-auto space-y-8">
        <div className="text-center space-y-3">
          <h1 className="text-4xl font-bold tracking-tight text-purple-100 uppercase">
            –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
          </h1>
          <p className="text-purple-200/70 max-w-2xl mx-auto">
            –ò–ò –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –≤–∞—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º –∏ —Å–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—é–∂–µ—Ç—ã, –≥–µ—Ä–æ–µ–≤, –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –¥–∏–∞–ª–æ–≥–∏
          </p>
        </div>

        <div className="space-y-6">
          <div className="relative p-6 rounded-xl bg-gradient-to-br from-purple-900/40 via-pink-900/30 to-purple-900/40 border border-purple-500/40 backdrop-blur-md">
            <div className="flex items-center justify-between mb-4">
              <Label htmlFor="gameName" className="text-purple-100 text-base">
                –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
              </Label>
              <Button
                variant="ghost"
                size="sm"
                onClick={generateRandomName}
                className="gap-2 text-yellow-400 hover:text-yellow-300 hover:bg-yellow-400/10"
              >
                <Icon name="Sparkles" size={16} />
                –°–ª—É—á–∞–π–Ω–æ
              </Button>
            </div>
            <Input
              id="gameName"
              value={gameName}
              onChange={(e) => setGameName(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã"
              className="text-lg bg-black/30 border-purple-500/30 text-white placeholder:text-purple-300/50"
            />
          </div>

          <div className="relative p-6 rounded-xl bg-gradient-to-br from-purple-900/40 via-pink-900/30 to-purple-900/40 border border-purple-500/40 backdrop-blur-md">
            <Label htmlFor="setting" className="text-purple-100 text-base mb-4 block">
              –û–ø–∏—à–∏—Ç–µ —Å–µ—Ç—Ç–∏–Ω–≥ –∏–≥—Ä—ã
            </Label>
            <Textarea
              id="setting"
              value={setting}
              onChange={(e) => setSetting(e.target.value)}
              placeholder="–û–ø–∏—à–∏—Ç–µ –º–∏—Ä, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é... –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!"
              className="min-h-[200px] resize-none bg-black/30 border-purple-500/30 text-white placeholder:text-purple-300/50"
            />
            <div className="mt-3 flex justify-between items-center text-sm">
              <span className="text-purple-300/70">{setting.length} —Å–∏–º–≤–æ–ª–æ–≤</span>
              {setting.length === 0 && (
                <span className="text-purple-300/70">
                  üí° –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—à—å - —Ç–µ–º –ª—É—á—à–µ –ò–ò –ø–æ–π–º—ë—Ç
                </span>
              )}
            </div>
          </div>

          <div className="relative p-6 rounded-xl bg-gradient-to-br from-purple-900/40 via-pink-900/30 to-purple-900/40 border border-purple-500/40 backdrop-blur-md">
            <Label htmlFor="aiInstructions" className="text-purple-100 text-base mb-4 block">
              –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò –ø–æ —Å—é–∂–µ—Ç—É –∏ –≤–µ–¥–µ–Ω–∏—é
            </Label>
            <Textarea
              id="aiInstructions"
              value={aiInstructions}
              onChange={(e) => setAiInstructions(e.target.value)}
              placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò: —Å—Ç–∏–ª—å –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏..."
              className="min-h-[150px] resize-none bg-black/30 border-purple-500/30 text-white placeholder:text-purple-300/50"
            />
            <div className="mt-3 flex justify-between items-center text-sm">
              <span className="text-purple-300/70">{aiInstructions.length} —Å–∏–º–≤–æ–ª–æ–≤</span>
              {aiInstructions.length === 0 && (
                <span className="text-purple-300/70">
                  ‚ú® –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –ò–ò –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –∑–∞–¥—É–º–∫—É
                </span>
              )}
            </div>
          </div>
        </div>

        <div className="flex gap-4">
          <Button
            variant="outline"
            onClick={() => navigate('/')}
            className="flex-1 gap-2 border-purple-500/40 hover:bg-purple-500/20 text-purple-200"
          >
            <Icon name="ArrowLeft" size={16} />
            –ù–∞–∑–∞–¥
          </Button>
          <Button
            onClick={handleStart}
            className="flex-1 gap-2 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white border-none text-lg py-6"
          >
            <Icon name="Rocket" size={20} />
            –ù–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ
          </Button>
        </div>
      </div>
    </div>
  );
};

export default CreateGame;