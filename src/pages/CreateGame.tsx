import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';

const CreateGame = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  
  const [gameName, setGameName] = useState('');
  const [setting, setSetting] = useState('');
  const [aiInstructions, setAiInstructions] = useState('');
  const [role, setRole] = useState<'hero' | 'author'>('hero');
  const [narrativeMode, setNarrativeMode] = useState<'first' | 'third' | 'love-interest'>('third');
  const [genre, setGenre] = useState('–§—ç–Ω—Ç–µ–∑–∏');
  const [rating, setRating] = useState('18+');
  const [characters, setCharacters] = useState<Array<{name: string; role: string; description: string}>>([]);

  const generateRandomName = () => {
    const names = [
      '–¢–µ–Ω–∏ –ø—Ä–æ—à–ª–æ–≥–æ',
      '–ó–∞–±—ã—Ç—ã–π –≥–æ—Ä–æ–¥',
      '–û—Ö–æ—Ç–∞ –Ω–∞ –¥—Ä–∞–∫–æ–Ω–∞',
      '–¢–∞–π–Ω—ã —Å—Ç–∞—Ä–æ–≥–æ –æ—Å–æ–±–Ω—è–∫–∞',
      '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –æ–¥–∏—Å—Å–µ—è',
      '–ü—Ä–æ–∫–ª—è—Ç–∏–µ –Ω–µ–∫—Ä–æ–º–∞–Ω—Ç–∞',
      '–ü—É—Ç—å —Å–∞–º—É—Ä–∞—è',
      '–ö–∏–±–µ—Ä-–ø–∞–Ω–∫ 2084',
      '–ü–∏—Ä–∞—Ç—ã –ö–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è',
      '–í–µ–¥—å–º–∞–∫ –∏–∑ –†–∏–≤–∏–∏'
    ];
    setGameName(names[Math.floor(Math.random() * names.length)]);
  };

  const handleStart = () => {
    if (!gameName.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã',
        variant: 'destructive'
      });
      return;
    }

    if (!setting.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–û–ø–∏—à–∏—Ç–µ —Å–µ—Ç—Ç–∏–Ω–≥ –∏–≥—Ä—ã',
        variant: 'destructive'
      });
      return;
    }

    const gameSettings = {
      name: gameName,
      setting,
      aiInstructions,
      role,
      narrativeMode,
      playerCount: 1,
      genre,
      rating,
      initialCharacters: characters,
      createdAt: new Date().toISOString()
    };

    localStorage.setItem('current-game-settings', JSON.stringify(gameSettings));
    navigate('/story/new');
  };

  const addCharacter = () => {
    setCharacters([...characters, { name: '', role: '', description: '' }]);
  };

  const updateCharacter = (index: number, field: 'name' | 'role' | 'description', value: string) => {
    const updated = [...characters];
    updated[index][field] = value;
    setCharacters(updated);
  };

  const removeCharacter = (index: number) => {
    setCharacters(characters.filter((_, i) => i !== index));
  };

  return (
    <div className="min-h-screen p-4 py-12 relative">
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute top-[15%] left-[10%] w-2 h-2 bg-purple-300 rounded-full animate-twinkle"></div>
        <div className="absolute top-[30%] right-[15%] w-1.5 h-1.5 bg-pink-200 rounded-full animate-twinkle-slow" style={{ animationDelay: '0.5s' }}></div>
        <div className="absolute top-[50%] left-[20%] w-1 h-1 bg-purple-400 rounded-full animate-twinkle" style={{ animationDelay: '1s' }}></div>
        <div className="absolute bottom-[35%] right-[25%] w-2 h-2 bg-pink-300 rounded-full animate-twinkle-slow" style={{ animationDelay: '1.5s' }}></div>
        <div className="absolute bottom-[20%] left-[35%] w-1.5 h-1.5 bg-purple-200 rounded-full animate-twinkle" style={{ animationDelay: '2s' }}></div>
        <div className="absolute top-[70%] right-[40%] w-1 h-1 bg-pink-400 rounded-full animate-twinkle-slow" style={{ animationDelay: '2.5s' }}></div>
      </div>
      <Button
        variant="ghost"
        onClick={() => navigate('/')}
        className="absolute top-4 left-4 gap-2 text-purple-300 hover:text-purple-100 hover:bg-purple-500/20 z-10"
      >
        <Icon name="Home" size={18} />
        –ù–∞ –≥–ª–∞–≤–Ω—É—é
      </Button>

      <div className="max-w-3xl mx-auto space-y-8">
        <div className="text-center space-y-3">
          <h1 className="text-4xl font-bold tracking-tight text-purple-100 uppercase">
            –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
          </h1>
          <p className="text-purple-200/70 max-w-2xl mx-auto">
            –ò–ò –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –≤–∞—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º –∏ —Å–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—é–∂–µ—Ç—ã, –≥–µ—Ä–æ–µ–≤, –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –¥–∏–∞–ª–æ–≥–∏
          </p>
        </div>

        <div className="space-y-6">
          <div className="relative p-6 rounded-xl bg-gradient-to-br from-purple-900/40 via-pink-900/30 to-purple-900/40 border border-purple-500/40 backdrop-blur-md">
            <div className="flex items-center justify-between mb-4">
              <Label htmlFor="gameName" className="text-purple-100 text-base">
                –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
              </Label>
              <Button
                variant="ghost"
                size="sm"
                onClick={generateRandomName}
                className="gap-2 text-yellow-400 hover:text-yellow-300 hover:bg-yellow-400/10"
              >
                <Icon name="Sparkles" size={16} />
                –°–ª—É—á–∞–π–Ω–æ
              </Button>
            </div>
            <Input
              id="gameName"
              value={gameName}
              onChange={(e) => setGameName(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã"
              className="text-lg bg-black/30 border-purple-500/30 text-white placeholder:text-purple-300/50"
            />
          </div>

          <div className="relative p-6 rounded-xl bg-gradient-to-br from-purple-900/40 via-pink-900/30 to-purple-900/40 border border-purple-500/40 backdrop-blur-md">
            <Label htmlFor="setting" className="text-purple-100 text-base mb-4 block">
              –û–ø–∏—à–∏—Ç–µ —Å–µ—Ç—Ç–∏–Ω–≥ –∏–≥—Ä—ã
            </Label>
            <Textarea
              id="setting"
              value={setting}
              onChange={(e) => setSetting(e.target.value)}
              placeholder="–û–ø–∏—à–∏—Ç–µ –º–∏—Ä, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é... –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!"
              className="min-h-[200px] resize-none bg-black/30 border-purple-500/30 text-white placeholder:text-purple-300/50"
            />
            <div className="mt-3 flex justify-between items-center text-sm">
              <span className="text-purple-300/70">{setting.length} —Å–∏–º–≤–æ–ª–æ–≤</span>
              {setting.length === 0 && (
                <span className="text-purple-300/70">
                  üí° –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—à—å - —Ç–µ–º –ª—É—á—à–µ –ò–ò –ø–æ–π–º—ë—Ç
                </span>
              )}
            </div>
          </div>

          <div className="relative p-6 rounded-xl bg-gradient-to-br from-purple-900/40 via-pink-900/30 to-purple-900/40 border border-purple-500/40 backdrop-blur-md">
            <Label className="text-purple-100 text-base mb-4 block">
              –í–∞—à–∞ —Ä–æ–ª—å –≤ –∏–≥—Ä–µ
            </Label>
            <div className="grid grid-cols-2 gap-3">
              <button
                onClick={() => setRole('hero')}
                className={`
                  p-4 rounded-lg border-2 transition-all text-left
                  ${
                    role === 'hero'
                      ? 'border-purple-400 bg-purple-500/30'
                      : 'border-purple-500/30 bg-black/20 hover:border-purple-400/50'
                  }
                `}
              >
                <div className="flex items-center gap-2 mb-2">
                  <Icon name="User" size={20} className="text-purple-300" />
                  <span className="font-bold text-purple-100">–ì–µ—Ä–æ–π</span>
                </div>
                <p className="text-xs text-purple-200/70">
                  –í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –≥–ª–∞–≤–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º, –ò–ò –≤–µ–¥—ë—Ç —Å—é–∂–µ—Ç –∏ NPC
                </p>
              </button>
              <button
                onClick={() => setRole('author')}
                className={`
                  p-4 rounded-lg border-2 transition-all text-left
                  ${
                    role === 'author'
                      ? 'border-purple-400 bg-purple-500/30'
                      : 'border-purple-500/30 bg-black/20 hover:border-purple-400/50'
                  }
                `}
              >
                <div className="flex items-center gap-2 mb-2">
                  <Icon name="BookOpen" size={20} className="text-purple-300" />
                  <span className="font-bold text-purple-100">–ê–≤—Ç–æ—Ä</span>
                </div>
                <p className="text-xs text-purple-200/70">
                  –í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å—é–∂–µ—Ç–æ–º –∏ –≤—Å–µ–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
                </p>
              </button>
            </div>
          </div>

          <div className="relative p-6 rounded-xl bg-gradient-to-br from-purple-900/40 via-pink-900/30 to-purple-900/40 border border-purple-500/40 backdrop-blur-md">
            <Label className="text-purple-100 text-base mb-4 block">
              –†–µ–∂–∏–º –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            </Label>
            <div className="space-y-3">
              <button
                onClick={() => setNarrativeMode('first')}
                className={`
                  w-full p-4 rounded-lg border-2 transition-all text-left
                  ${
                    narrativeMode === 'first'
                      ? 'border-purple-400 bg-purple-500/30'
                      : 'border-purple-500/30 bg-black/20 hover:border-purple-400/50'
                  }
                `}
              >
                <div className="flex items-center gap-2 mb-2">
                  <Icon name="Eye" size={18} className="text-purple-300" />
                  <span className="font-bold text-purple-100">–û—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞</span>
                </div>
                <p className="text-xs text-purple-200/70 mb-2">
                  –ü–æ–ª–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                </p>
                {narrativeMode === 'first' && (
                  <div className="mt-3 p-3 bg-black/40 rounded border border-purple-400/30">
                    <p className="text-xs text-purple-100/90 italic leading-relaxed">
                      "–Ø –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—é –¥–≤–µ—Ä—å. –ü–µ—Ç–ª–∏ —Å–∫—Ä–∏–ø—è—Ç. –•–æ–ª–æ–¥–Ω—ã–π –≤–æ–∑–¥—É—Ö –æ–±–∂–∏–≥–∞–µ—Ç –ª–∏—Ü–æ. 
                      –í —Ç–µ–º–Ω–æ—Ç–µ —á—Ç–æ-—Ç–æ —à–µ–≤–µ–ª–∏—Ç—Å—è..."
                    </p>
                  </div>
                )}
              </button>
              <button
                onClick={() => setNarrativeMode('third')}
                className={`
                  w-full p-4 rounded-lg border-2 transition-all text-left
                  ${
                    narrativeMode === 'third'
                      ? 'border-purple-400 bg-purple-500/30'
                      : 'border-purple-500/30 bg-black/20 hover:border-purple-400/50'
                  }
                `}
              >
                <div className="flex items-center gap-2 mb-2">
                  <Icon name="Users" size={18} className="text-purple-300" />
                  <span className="font-bold text-purple-100">–û—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞</span>
                </div>
                <p className="text-xs text-purple-200/70 mb-2">
                  –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                </p>
                {narrativeMode === 'third' && (
                  <div className="mt-3 p-3 bg-black/40 rounded border border-purple-400/30">
                    <p className="text-xs text-purple-100/90 italic leading-relaxed">
                      "–û–Ω–∞ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–≤–µ—Ä—å. –ü–µ—Ç–ª–∏ —Å–∫—Ä–∏–ø—è—Ç. –•–æ–ª–æ–¥–Ω—ã–π –≤–æ–∑–¥—É—Ö –æ–±–∂–∏–≥–∞–µ—Ç –µ—ë –ª–∏—Ü–æ. 
                      –í —Ç–µ–º–Ω–æ—Ç–µ —á—Ç–æ-—Ç–æ —à–µ–≤–µ–ª–∏—Ç—Å—è..."
                    </p>
                  </div>
                )}
              </button>
              <button
                onClick={() => setNarrativeMode('love-interest')}
                className={`
                  w-full p-4 rounded-lg border-2 transition-all text-left
                  ${
                    narrativeMode === 'love-interest'
                      ? 'border-pink-400 bg-pink-500/30'
                      : 'border-purple-500/30 bg-black/20 hover:border-pink-400/50'
                  }
                `}
              >
                <div className="flex items-center gap-2 mb-2">
                  <Icon name="Heart" size={18} className="text-pink-300" />
                  <span className="font-bold text-purple-100">–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å</span>
                </div>
                <p className="text-xs text-purple-200/70 mb-2">
                  –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ —Å —É–ø–æ—Ä–æ–º –Ω–∞ —Ä–æ–º–∞–Ω—Ç–∏–∫—É
                </p>
                {narrativeMode === 'love-interest' && (
                  <div className="mt-3 p-3 bg-black/40 rounded border border-pink-400/30">
                    <p className="text-xs text-purple-100/90 italic leading-relaxed mb-2">
                      "–û–Ω–∞ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–≤–µ—Ä—å. –•–æ–ª–æ–¥–Ω—ã–π –≤–æ–∑–¥—É—Ö –æ–±–∂–∏–≥–∞–µ—Ç –ª–∏—Ü–æ."
                    </p>
                    <p className="text-xs text-pink-200/90 italic leading-relaxed">
                      üí≠ *–û–Ω —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –Ω–µ—ë. –°–µ—Ä–¥—Ü–µ –±—å—ë—Ç—Å—è —á–∞—â–µ. "–ö–∞–∫–∞—è –∂–µ –æ–Ω–∞ —Å–º–µ–ª–∞—è...", ‚Äî –¥—É–º–∞–µ—Ç –æ–Ω, 
                      –Ω–µ –≤ —Å–∏–ª–∞—Ö –æ—Ç–≤–µ—Å—Ç–∏ –≤–∑–≥–ª—è–¥.*
                    </p>
                  </div>
                )}
              </button>
            </div>
          </div>

          <div className="relative p-6 rounded-xl bg-gradient-to-br from-purple-900/40 via-pink-900/30 to-purple-900/40 border border-purple-500/40 backdrop-blur-md">
            <Label className="text-purple-100 text-base mb-4 block">
              –ñ–∞–Ω—Ä –∏ —Ä–µ–π—Ç–∏–Ω–≥
            </Label>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="genre" className="text-purple-200/80 text-sm mb-2 block">
                  –ñ–∞–Ω—Ä
                </Label>
                <select
                  id="genre"
                  value={genre}
                  onChange={(e) => setGenre(e.target.value)}
                  className="w-full p-3 rounded-lg bg-black/30 border border-purple-500/30 text-white focus:border-purple-400 focus:outline-none"
                >
                  <option value="–§—ç–Ω—Ç–µ–∑–∏">–§—ç–Ω—Ç–µ–∑–∏</option>
                  <option value="–ö–∏–±–µ—Ä–ø–∞–Ω–∫">–ö–∏–±–µ—Ä–ø–∞–Ω–∫</option>
                  <option value="–£–∂–∞—Å—ã">–£–∂–∞—Å—ã</option>
                  <option value="–†–æ–º–∞–Ω—Ç–∏–∫–∞">–†–æ–º–∞–Ω—Ç–∏–∫–∞</option>
                  <option value="–î–µ—Ç–µ–∫—Ç–∏–≤">–î–µ—Ç–µ–∫—Ç–∏–≤</option>
                  <option value="–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞">–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞</option>
                  <option value="–ü–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å">–ü–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å</option>
                  <option value="–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ">–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ</option>
                  <option value="–î—Ä–∞–º–∞">–î—Ä–∞–º–∞</option>
                  <option value="–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è">–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è</option>
                </select>
              </div>
              <div>
                <Label htmlFor="rating" className="text-purple-200/80 text-sm mb-2 block">
                  –†–µ–π—Ç–∏–Ω–≥
                </Label>
                <select
                  id="rating"
                  value={rating}
                  onChange={(e) => setRating(e.target.value)}
                  className="w-full p-3 rounded-lg bg-black/30 border border-purple-500/30 text-white focus:border-purple-400 focus:outline-none"
                >
                  <option value="6+">6+ (–î–ª—è –¥–µ—Ç–µ–π)</option>
                  <option value="12+">12+ (–ü–æ–¥—Ä–æ—Å—Ç–∫–∏)</option>
                  <option value="16+">16+ (–í–∑—Ä–æ—Å–ª—ã–µ —Ç–µ–º—ã)</option>
                  <option value="18+">18+ (–ë–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã)</option>
                </select>
              </div>
            </div>
          </div>

          <div className="relative p-6 rounded-xl bg-gradient-to-br from-purple-900/40 via-pink-900/30 to-purple-900/40 border border-purple-500/40 backdrop-blur-md">
            <div className="flex items-center justify-between mb-4">
              <Label className="text-purple-100 text-base">
                –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
              </Label>
              <Button
                variant="ghost"
                size="sm"
                onClick={addCharacter}
                className="gap-2 text-yellow-400 hover:text-yellow-300 hover:bg-yellow-400/10"
              >
                <Icon name="UserPlus" size={16} />
                –î–æ–±–∞–≤–∏—Ç—å
              </Button>
            </div>

            {characters.length === 0 ? (
              <div className="text-center py-8 text-purple-300/60 text-sm">
                <Icon name="Users" size={40} className="mx-auto mb-2 opacity-40" />
                <p>–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ —Ö–æ–¥—É –∏—Å—Ç–æ—Ä–∏–∏</p>
                <p className="text-xs mt-1">–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö –∑–∞—Ä–∞–Ω–µ–µ</p>
              </div>
            ) : (
              <div className="space-y-3">
                {characters.map((char, idx) => (
                  <div key={idx} className="p-4 bg-black/40 border border-purple-500/30 rounded-lg space-y-3">
                    <div className="flex items-start gap-3">
                      <div className="flex-1 space-y-3">
                        <Input
                          value={char.name}
                          onChange={(e) => updateCharacter(idx, 'name', e.target.value)}
                          placeholder="–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
                          className="bg-black/30 border-purple-500/30 text-white placeholder:text-purple-300/50"
                        />
                        <Input
                          value={char.role}
                          onChange={(e) => updateCharacter(idx, 'role', e.target.value)}
                          placeholder="–†–æ–ª—å (–≤–æ–∏–Ω, –º–∞–≥, —Ç–æ—Ä–≥–æ–≤–µ—Ü...)"
                          className="bg-black/30 border-purple-500/30 text-white placeholder:text-purple-300/50"
                        />
                        <Textarea
                          value={char.description}
                          onChange={(e) => updateCharacter(idx, 'description', e.target.value)}
                          placeholder="–í–Ω–µ—à–Ω–æ—Å—Ç—å –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä..."
                          className="min-h-[60px] resize-none bg-black/30 border-purple-500/30 text-white placeholder:text-purple-300/50"
                        />
                      </div>
                      <button
                        onClick={() => removeCharacter(idx)}
                        className="p-2 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded transition-colors"
                      >
                        <Icon name="X" size={18} />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          <div className="relative p-6 rounded-xl bg-gradient-to-br from-purple-900/40 via-pink-900/30 to-purple-900/40 border border-purple-500/40 backdrop-blur-md">
            <Label htmlFor="aiInstructions" className="text-purple-100 text-base mb-4 block">
              –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò –ø–æ —Å—é–∂–µ—Ç—É –∏ –≤–µ–¥–µ–Ω–∏—é
            </Label>
            <Textarea
              id="aiInstructions"
              value={aiInstructions}
              onChange={(e) => setAiInstructions(e.target.value)}
              placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò: —Å—Ç–∏–ª—å –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏..."
              className="min-h-[150px] resize-none bg-black/30 border-purple-500/30 text-white placeholder:text-purple-300/50"
            />
            <div className="mt-3 flex justify-between items-center text-sm">
              <span className="text-purple-300/70">{aiInstructions.length} —Å–∏–º–≤–æ–ª–æ–≤</span>
              {aiInstructions.length === 0 && (
                <span className="text-purple-300/70">
                  ‚ú® –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –ò–ò –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –∑–∞–¥—É–º–∫—É
                </span>
              )}
            </div>
          </div>
        </div>

        <div className="flex gap-4">
          <Button
            variant="outline"
            onClick={() => navigate('/')}
            className="flex-1 gap-2 border-purple-500/40 hover:bg-purple-500/20 text-purple-200"
          >
            <Icon name="ArrowLeft" size={16} />
            –ù–∞–∑–∞–¥
          </Button>
          <Button
            onClick={handleStart}
            className="flex-1 gap-2 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white border-none text-lg py-6"
          >
            <Icon name="Rocket" size={20} />
            –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
          </Button>
        </div>
      </div>
    </div>
  );
};

export default CreateGame;