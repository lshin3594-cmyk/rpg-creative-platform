import { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Icon from '@/components/ui/icon';

interface OnboardingTutorialProps {
  onComplete: () => void;
}

export const OnboardingTutorial = ({ onComplete }: OnboardingTutorialProps) => {
  const [step, setStep] = useState(0);
  const [isVisible, setIsVisible] = useState(true);

  const steps = [
    {
      title: 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏—Å—Ç–æ—Ä–∏–π!',
      description: '–°–æ–∑–¥–∞–≤–∞–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è —Å –ò–ò –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã. –¢–≤–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏, —Ç–≤–æ–∏ –º–∏—Ä—ã, —Ç–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞.',
      icon: 'Sparkles',
      position: 'center'
    },
    {
      title: '‚ú® –°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
      description: '–ü–µ—Ä–µ–π–¥–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏" –∏ —Å–æ–∑–¥–∞–π —Å–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è. –û–ø–∏—à–∏ –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.',
      icon: 'User',
      position: 'top-left'
    },
    {
      title: 'üåç –í—ã–±–µ—Ä–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π –º–∏—Ä',
      description: '–í–æ –≤–∫–ª–∞–¥–∫–µ "–ú–∏—Ä—ã" –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –≤—Å–µ–ª–µ–Ω–Ω—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—É—é (–°—Ä–µ–¥–∏–∑–µ–º—å–µ, Westeros –∏ –¥—Ä.)',
      icon: 'Globe',
      position: 'top-left'
    },
    {
      title: 'üé¨ –ù–∞—á–Ω–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ',
      description: '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –º–∏—Ä, –æ–ø–∏—à–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é ‚Äî –∏ –≤–ø–µ—Ä—ë–¥!',
      icon: 'Play',
      position: 'bottom-right'
    },
    {
      title: 'üéÆ –ò–≥—Ä–∞–π —Å–≤–æ–±–æ–¥–Ω–æ',
      description: '–û–ø–∏—Å—ã–≤–∞–π –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –≤–µ–¥–∏ –¥–∏–∞–ª–æ–≥–∏, –∏—Å—Å–ª–µ–¥—É–π. –ò–ò –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö —Ä–µ—à–µ–Ω–∏–π.',
      icon: 'Gamepad2',
      position: 'center'
    }
  ];

  const currentStep = steps[step];

  const handleNext = () => {
    if (step < steps.length - 1) {
      setStep(step + 1);
    } else {
      setIsVisible(false);
      setTimeout(() => {
        onComplete();
        localStorage.setItem('onboarding_completed', 'true');
      }, 300);
    }
  };

  const handleSkip = () => {
    setIsVisible(false);
    setTimeout(() => {
      onComplete();
      localStorage.setItem('onboarding_completed', 'true');
    }, 300);
  };

  if (!isVisible) return null;

  const positionClasses = {
    'center': 'fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2',
    'top-left': 'fixed top-24 left-8',
    'bottom-right': 'fixed bottom-24 right-8'
  };

  return (
    <div className="fixed inset-0 z-[100] bg-background/80 backdrop-blur-sm animate-fade-in">
      <Card 
        className={`
          ${positionClasses[currentStep.position as keyof typeof positionClasses]} 
          max-w-md p-6 shadow-2xl border-2 border-primary/50 
          animate-scale-in
        `}
      >
        <div className="space-y-4">
          <div className="flex items-start justify-between gap-4">
            <div className="flex-1 space-y-2">
              <div className="flex items-center gap-2">
                <Icon name={currentStep.icon as any} size={24} className="text-primary" />
                <h3 className="font-bold text-lg">{currentStep.title}</h3>
              </div>
              <p className="text-sm text-muted-foreground leading-relaxed">
                {currentStep.description}
              </p>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={handleSkip}
              className="h-6 w-6 p-0"
            >
              <Icon name="X" size={16} />
            </Button>
          </div>

          <div className="flex items-center gap-2">
            <div className="flex gap-1.5 flex-1">
              {steps.map((_, i) => (
                <div
                  key={i}
                  className={`h-1.5 rounded-full transition-all ${
                    i === step 
                      ? 'bg-primary flex-1' 
                      : i < step 
                        ? 'bg-primary/40 w-8' 
                        : 'bg-muted w-8'
                  }`}
                />
              ))}
            </div>
            <span className="text-xs text-muted-foreground whitespace-nowrap">
              {step + 1}/{steps.length}
            </span>
          </div>

          <div className="flex gap-2">
            {step > 0 && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => setStep(step - 1)}
                className="gap-1"
              >
                <Icon name="ChevronLeft" size={14} />
                –ù–∞–∑–∞–¥
              </Button>
            )}
            <Button
              size="sm"
              onClick={handleNext}
              className="gap-1 flex-1"
            >
              {step === steps.length - 1 ? '–ù–∞—á–∞—Ç—å' : '–î–∞–ª–µ–µ'}
              <Icon name="ChevronRight" size={14} />
            </Button>
          </div>
        </div>
      </Card>
    </div>
  );
};
