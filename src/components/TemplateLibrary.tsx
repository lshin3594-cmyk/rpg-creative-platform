import { useState } from 'react';
import { useRpgGames } from '@/hooks/useRpgGames';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import { useNavigate } from 'react-router-dom';
import { CharacterCreation, CharacterData } from './CharacterCreation';
import { gameTemplates, GameTemplate } from './templates/gameTemplates';
import { TemplateCard } from './templates/TemplateCard';

export const TemplateLibrary = () => {
  const [selectedTemplate, setSelectedTemplate] = useState<GameTemplate | null>(null);
  const [showCharacterCreation, setShowCharacterCreation] = useState(false);
  const [isStarting, setIsStarting] = useState(false);
  const { createGame } = useRpgGames();
  const { user } = useAuth();
  const { toast } = useToast();
  const navigate = useNavigate();

  const handleSelectTemplate = (template: GameTemplate) => {
    if (!user) {
      toast({
        title: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        description: '–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É',
        variant: 'destructive'
      });
      return;
    }
    setSelectedTemplate(template);
    setShowCharacterCreation(true);
  };

  const handleCharacterComplete = async (character: CharacterData) => {
    if (!selectedTemplate) return;

    setIsStarting(true);

    try {
      const genderText = character.gender === 'male' ? '–º—É–∂—á–∏–Ω–∞' : character.gender === 'female' ? '–∂–µ–Ω—â–∏–Ω–∞' : '–Ω–µ–±–∏–Ω–∞—Ä–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞';
      
      const characterInfo = `–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π: ${character.name} (${genderText}). ${character.description}`;
      
      const enhancedInstructions = `${selectedTemplate.aiInstructions}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ì–õ–ê–í–ù–û–ú –ì–ï–†–û–ï:
${characterInfo}

–í–ê–ñ–ù–û: –û–±—Ä–∞—â–∞–π—Å—è –∫ –∏–≥—Ä–æ–∫—É –∫–∞–∫ "${character.name}" –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª—É (${genderText}). –£—á–∏—Ç—ã–≤–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏.`;

      const gameSettings = {
        role: 'hero',
        narrativeMode: 'first',
        playerCount: 1,
        genre: selectedTemplate.genre,
        rating: selectedTemplate.rating,
        aiModel: 'deepseek',
        aiInstructions: enhancedInstructions,
        playerCharacter: character,
        initialCharacters: [],
        storyMemory: {
          keyMoments: [],
          characterRelationships: {},
          worldChanges: []
        }
      };

      const newGame = await createGame({
        title: selectedTemplate.title,
        genre: selectedTemplate.genre,
        setting: selectedTemplate.setting,
        difficulty: selectedTemplate.rating,
        story_context: JSON.stringify(gameSettings)
      });

      if (newGame) {
        toast({
          title: '–ü–æ–µ—Ö–∞–ª–∏! üöÄ',
          description: `${character.name} –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!`
        });
        navigate('/play-game', { state: { gameId: newGame.id } });
      } else {
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É',
          variant: 'destructive'
        });
      }
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É',
        variant: 'destructive'
      });
    } finally {
      setIsStarting(false);
    }
  };

  if (showCharacterCreation && selectedTemplate) {
    return (
      <CharacterCreation
        templateTitle={selectedTemplate.title}
        templateSetting={selectedTemplate.setting}
        onComplete={handleCharacterComplete}
        onBack={() => {
          setShowCharacterCreation(false);
          setSelectedTemplate(null);
        }}
      />
    );
  }

  return (
    <div className="space-y-6">
      <div className="text-center space-y-2">
        <h2 className="text-3xl font-bold text-white">–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤</h2>
        <p className="text-purple-200/80">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å</p>
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {gameTemplates.map((template) => (
          <TemplateCard
            key={template.id}
            template={template}
            isSelected={selectedTemplate?.id === template.id}
            isStarting={isStarting}
            onSelect={() => setSelectedTemplate(selectedTemplate?.id === template.id ? null : template)}
            onStartGame={() => handleSelectTemplate(template)}
          />
        ))}
      </div>
    </div>
  );
};
