export const parseMetaFromStory = (story: string, episodeNum: number) => {
  const metaMatch = story.match(/\*\*\[–ú–ï–¢–ê\]\*\*([\s\S]*?)---/);
  if (!metaMatch) return null;

  const metaText = metaMatch[1];
  
  const timeMatch = metaText.match(/‚è∞[^:]*:\s*(.+)/);
  const eventsMatch = metaText.match(/üé¨[^:]*:\s*(.+)/);
  const relationsMatch = metaText.match(/üíï[^:]*:\s*(.+)/);
  const emotionsMatch = metaText.match(/üß†[^:]*:\s*(.+)/);
  const cluesMatch = metaText.match(/üîç[^:]*:\s*(.+)/);
  const questionsMatch = metaText.match(/‚ùì[^:]*:\s*(.+)/);
  const plansMatch = metaText.match(/üéØ[^:]*:\s*(.+)/);
  const inventoryMatch = metaText.match(/üéí[^:]*:\s*(.+)/);
  const resourcesMatch = metaText.match(/üí∞[^:]*:\s*(.+)/);

  // –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: "–ú–µ—á (1), –ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è (3)"
  const inventory = inventoryMatch 
    ? inventoryMatch[1].split(',').map(item => {
        const match = item.trim().match(/(.+?)\s*\((\d+)\)/);
        if (match) {
          return { name: match[1].trim(), quantity: parseInt(match[2]) };
        }
        return { name: item.trim() };
      })
    : [];

  // –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤: "–ó–æ–ª–æ—Ç–æ: 150 (+50), –ó–¥–æ—Ä–æ–≤—å–µ: 80 (-20)"
  const resources = resourcesMatch
    ? resourcesMatch[1].split(',').map(res => {
        const match = res.trim().match(/(.+?):\s*(\d+)\s*(?:\(([+-]\d+)\))?/);
        if (match) {
          return {
            name: match[1].trim(),
            value: parseInt(match[2]),
            change: match[3] ? parseInt(match[3]) : undefined
          };
        }
        return null;
      }).filter(Boolean) as { name: string; value: number; change?: number }[]
    : [];

  const storyWithoutMeta = story.replace(/\*\*\[–ú–ï–¢–ê\]\*\*[\s\S]*?---\s*/, '');

  return {
    episode: episodeNum,
    title: `–≠–ø–∏–∑–æ–¥ ${episodeNum}`,
    time: timeMatch ? timeMatch[1].trim() : undefined,
    location: timeMatch ? timeMatch[1].split(',').pop()?.trim() : undefined,
    events: eventsMatch ? [eventsMatch[1].trim()] : [],
    npcs: [],
    emotions: emotionsMatch ? [emotionsMatch[1].trim()] : [],
    clues: cluesMatch ? [cluesMatch[1].trim()] : [],
    questions: questionsMatch ? [questionsMatch[1].trim()] : [],
    plans: plansMatch ? [plansMatch[1].trim()] : [],
    inventory,
    resources,
    cleanStory: storyWithoutMeta
  };
};