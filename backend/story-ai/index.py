"""
Business: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏–π —á–µ—Ä–µ–∑ DeepSeek API
Args: event —Å httpMethod, body (game_data, user_action, history)
Returns: HTTP response —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
"""

import json
import os
import hashlib
import time
from typing import Dict, Any
import requests

# –ö–µ—à
CACHE: Dict[str, tuple] = {}
CACHE_TTL = 1800  # 30 –º–∏–Ω—É—Ç

def get_cache_key(prompt: str) -> str:
    return hashlib.md5(prompt.encode('utf-8')).hexdigest()

def get_from_cache(key: str) -> str | None:
    if key in CACHE:
        cached_time, cached_value = CACHE[key]
        if time.time() - cached_time < CACHE_TTL:
            return cached_value
        else:
            del CACHE[key]
    return None

def save_to_cache(key: str, value: str):
    CACHE[key] = (time.time(), value)
    if len(CACHE) > 50:
        current_time = time.time()
        expired_keys = [k for k, (t, _) in CACHE.items() if current_time - t >= CACHE_TTL]
        for k in expired_keys:
            del CACHE[k]

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    try:
        method: str = event.get('httpMethod', 'POST')
        
        if method == 'OPTIONS':
            return {
                'statusCode': 200,
                'headers': {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'POST, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type, X-User-Id',
                    'Access-Control-Max-Age': '86400'
                },
                'body': ''
            }
        
        if method != 'POST':
            return {
                'statusCode': 405,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({'error': 'Method not allowed'})
            }
        
        body_data = json.loads(event.get('body', '{}'))
        
        game_settings = body_data.get('game_settings', {})
        user_action = body_data.get('user_action', '')
        history = body_data.get('history', [])
        
        genre = game_settings.get('genre', '—Ñ—ç–Ω—Ç–µ–∑–∏')
        setting = body_data.get('setting', '')
        characters = game_settings.get('initialCharacters', [])
        rating = game_settings.get('rating', '18+')
        narrative_mode = game_settings.get('narrativeMode', 'third')
        role = game_settings.get('role', 'hero')
        world_setting = body_data.get('setting', '')
        
        main_char = characters[0] if characters else None
        mc_name = main_char.get('name', '–ò–≥—Ä–æ–∫') if main_char else '–ò–≥—Ä–æ–∫'
        mc_role = main_char.get('role', '–≥–µ—Ä–æ–π') if main_char else '–≥–µ—Ä–æ–π'
        
        npc_str = ', '.join([c.get('name', '') for c in characters[1:4]]) if len(characters) > 1 else '–≤—Å—Ç—Ä–µ—Ç–∏—Ç –≤ –º–∏—Ä–µ'
        
        pov_instruction = {
            'first': f'–û—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ({mc_name}). –ò–ì–†–û–ö –ò–ì–†–ê–ï–¢ –ó–ê {mc_name.upper()}.',
            'third': f'–û—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞. –ò–ì–†–û–ö –ö–û–ù–¢–†–û–õ–ò–†–£–ï–¢ {mc_name.upper()}.',
            'love-interest': f'–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å. –ò–≥—Ä–æ–∫ –≤–ª—é–±–ª—è–µ—Ç—Å—è –≤ {mc_name}.'
        }.get(narrative_mode, f'–ò–≥—Ä–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç {mc_name}')
        
        system_prompt = f"""–¢–´ –í–ï–î–£–©–ò–ô –ò–ì–†–´. –ñ–∞–Ω—Ä: {genre}, —Ä–µ–π—Ç–∏–Ω–≥ {rating}.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å –º–∏—Ä, —Å—é–∂–µ—Ç, —Å–æ–±—ã—Ç–∏—è. –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏—Ö –≤ —Å—Ü–µ–Ω—É. –ü–æ–¥–≤–µ—Å—Ç–∏ –∫ –∏–≥—Ä–æ–∫—É –≤ –∫–æ–Ω—Ü–µ.

–°–ï–¢–¢–ò–ù–ì: {world_setting or '—Ñ—ç–Ω—Ç–µ–∑–∏ –º–∏—Ä'}

–ì–õ–ê–í–ù–´–ô –ü–ï–†–°–û–ù–ê–ñ (—É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∏–≥—Ä–æ–∫–æ–º):
‚Ä¢ –ò–º—è: {mc_name}
‚Ä¢ –†–æ–ª—å: {mc_role}
‚Ä¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ê–í–ò–õ–û: –ù–ï –¥–µ–π—Å—Ç–≤—É–π –∑–∞ {mc_name}, –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–π –∑–∞ –Ω–µ—ë —Ä–µ—à–µ–Ω–∏—è, –ù–ï –≤–µ–¥–∏ –∑–∞ –Ω–µ—ë –¥–∏–∞–ª–æ–≥–∏!

NPC (—Ç—ã –∏–≥—Ä–∞–µ—à—å –∑–∞ –Ω–∏—Ö): {npc_str}

–ü–û–í–ï–°–¢–í–û–í–ê–ù–ò–ï: {pov_instruction}

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. {mc_name} ‚Äî —ç—Ç–æ –ò–ì–†–û–ö. –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏—è/–º—ã—Å–ª–∏/—Å–ª–æ–≤–∞ –∑–∞ –Ω–µ—ë.
2. –ü–û–î–†–û–ë–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –æ–¥–µ–∂–¥—ã, –ª–∏—Ü ‚Äî –í–ê–ñ–ù–û.
3. –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏—ë–º—ã: –º–µ—Ç–∞—Ñ–æ—Ä—ã, —ç–ø–∏—Ç–µ—Ç—ã, —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –∏—Ä–æ–Ω–∏—è, –æ–∫—Å—é–º–æ—Ä–æ–Ω, –≥–∏–ø–µ—Ä–±–æ–ª–∞, —Å–∏–º–≤–æ–ª–∏–∑–º, —Å–∞—Ä–∫–∞–∑–º.
4. –î–∏–∞–ª–æ–≥–∏ –ñ–ò–í–´–ï: –º–∞—Ç + —Å–ª–µ–Ω–≥ + —é–º–æ—Ä. NPC –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –ø–æ–º–Ω—è—Ç –ø—Ä–æ—à–ª–æ–µ.
5. {rating} –ë–ï–ó –¶–ï–ù–ó–£–†–´. –°–µ–∫—Å-—Å—Ü–µ–Ω—ã –ø–æ–¥—Ä–æ–±–Ω–æ, –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ.
6. –ù–µ –Ω–∞—Å—Ç–∞–∏–≤–∞–π –Ω–∞ –æ–¥–Ω–æ–π —Å—é–∂–µ—Ç–Ω–æ–π –ª–∏–Ω–∏–∏ ‚Äî —Å–≤–æ–±–æ–¥–∞ –≤—ã–±–æ—Ä–∞.
7. –°–µ—Ä—å—ë–∑–Ω–æ–µ + —é–º–æ—Ä = –∂–∏–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è.
8. –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏–π: –º–∏—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –ª–æ–≥–∏—á–Ω–æ.
9. 600-1000 —Å–ª–æ–≤ –Ω–∞ —Ö–æ–¥.

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
**[–ú–ï–¢–ê]**
‚è∞ –í—Ä–µ–º—è/–º–µ—Å—Ç–æ: [–∫–æ–≥–¥–∞ –∏ –≥–¥–µ]
üé¨ –°–æ–±—ã—Ç–∏—è: [2 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è —Ö–æ–¥–∞]
üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è: {mc_name} —Å NPC (–ø—Ä–æ—Ü–µ–Ω—Ç—ã +/-)
üß† –≠–º–æ—Ü–∏–∏: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
üîç –ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: —É–ª–∏–∫–∏, —Ñ–∞–∫—Ç—ã
‚öîÔ∏è –¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: –≤—Ä–∞–≥–∏, —Å–æ—é–∑–Ω–∏–∫–∏, —Ä–µ—Å—É—Ä—Å—ã
‚ùì –ù–µ—Ä–µ—à—ë–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
üéØ –ü–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥

---
[–ò–°–¢–û–†–ò–Ø: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã 3-5 –∞–±–∑–∞—Ü–µ–≤ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏, –æ–ø–∏—Å–∞–Ω–∏—è–º–∏, —ç–º–æ—Ü–∏—è–º–∏. –ù–ï –ü–ò–®–ò –ó–ê {mc_name}!]

–ù–ê–ß–ù–ò –∏–≥—Ä—É —Å —è—Ä–∫–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–π —Å—Ü–µ–Ω—ã. –ü—Ä–µ–¥—Å—Ç–∞–≤—å –º–∏—Ä –∏ NPC."""
        
        messages = [{'role': 'system', 'content': system_prompt}]
        
        for entry in history[-10:]:
            messages.append({'role': 'user', 'content': entry.get('user', '')})
            messages.append({'role': 'assistant', 'content': entry.get('ai', '')})
        
        if user_action:
            if '@[–ú–ï–¢–ê-–ö–û–ú–ê–ù–î–ê]:' in user_action:
                meta_cmd, player_action = user_action.split('\n\n', 1)
                meta_text = meta_cmd.replace('@[–ú–ï–¢–ê-–ö–û–ú–ê–ù–î–ê]:', '').strip()
                messages.append({'role': 'user', 'content': f"–ö–û–ú–ê–ù–î–ê –û–¢ –ò–ì–†–û–ö–ê: {meta_text}\n\n–î–µ–π—Å—Ç–≤–∏–µ {mc_name}: {player_action}"})
            else:
                messages.append({'role': 'user', 'content': f"–î–µ–π—Å—Ç–≤–∏–µ {mc_name}: {user_action}"})
        else:
            messages.append({'role': 'user', 'content': "–ù–∞—á–Ω–∏ –∏–≥—Ä—É. –û–ø–∏—à–∏ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É."})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cache_key = get_cache_key(json.dumps(messages, ensure_ascii=False))
        cached = get_from_cache(cache_key)
        if cached:
            return {
                'statusCode': 200,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                    'X-Cache': 'HIT'
                },
                'isBase64Encoded': False,
                'body': json.dumps({'story': cached})
            }
        
        api_key = os.environ.get('DEEPSEEK_API_KEY')
        
        if not api_key:
            return {
                'statusCode': 500,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({'error': 'DeepSeek API key not configured'})
            }
        
        response = requests.post(
            'https://api.deepseek.com/v1/chat/completions',
            headers={
                'Authorization': f'Bearer {api_key}',
                'Content-Type': 'application/json'
            },
            json={
                'model': 'deepseek-chat',
                'messages': messages,
                'temperature': 0.75,
                'max_tokens': 800
            },
            timeout=30
        )
        
        if not response.ok:
            return {
                'statusCode': response.status_code,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({'error': f'DeepSeek API error: {response.text}'})
            }
        
        result = response.json()
        story_text = result['choices'][0]['message']['content']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        save_to_cache(cache_key, story_text)
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'X-Cache': 'MISS'
            },
            'isBase64Encoded': False,
            'body': json.dumps({'story': story_text})
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': f'Error: {str(e)}'})
        }