"""
Business: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏–π —á–µ—Ä–µ–∑ DeepSeek API
Args: event —Å httpMethod, body (game_data, user_action, history)
Returns: HTTP response —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
"""

import json
import os
import hashlib
import time
from typing import Dict, Any
import requests

# –ö–µ—à
CACHE: Dict[str, tuple] = {}
CACHE_TTL = 1800  # 30 –º–∏–Ω—É—Ç

def get_cache_key(prompt: str) -> str:
    return hashlib.md5(prompt.encode('utf-8')).hexdigest()

def get_from_cache(key: str) -> str | None:
    if key in CACHE:
        cached_time, cached_value = CACHE[key]
        if time.time() - cached_time < CACHE_TTL:
            return cached_value
        else:
            del CACHE[key]
    return None

def save_to_cache(key: str, value: str):
    CACHE[key] = (time.time(), value)
    if len(CACHE) > 50:
        current_time = time.time()
        expired_keys = [k for k, (t, _) in CACHE.items() if current_time - t >= CACHE_TTL]
        for k in expired_keys:
            del CACHE[k]

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    try:
        method: str = event.get('httpMethod', 'POST')
        
        if method == 'OPTIONS':
            return {
                'statusCode': 200,
                'headers': {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'POST, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type, X-User-Id',
                    'Access-Control-Max-Age': '86400'
                },
                'body': ''
            }
        
        if method != 'POST':
            return {
                'statusCode': 405,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({'error': 'Method not allowed'})
            }
        
        body_data = json.loads(event.get('body', '{}'))
        
        game_settings = body_data.get('game_settings', {})
        user_action = body_data.get('user_action', '')
        history = body_data.get('history', [])
        
        genre = game_settings.get('genre', '—Ñ—ç–Ω—Ç–µ–∑–∏')
        setting = body_data.get('setting', '')
        characters = game_settings.get('initialCharacters', [])
        rating = game_settings.get('rating', '18+')
        narrative_mode = game_settings.get('narrativeMode', 'third')
        role = game_settings.get('role', 'hero')
        world_setting = body_data.get('setting', '')
        
        main_char = characters[0] if characters else None
        mc_name = main_char.get('name', '–ò–≥—Ä–æ–∫') if main_char else '–ò–≥—Ä–æ–∫'
        mc_role = main_char.get('role', '–≥–µ—Ä–æ–π') if main_char else '–≥–µ—Ä–æ–π'
        mc_desc = main_char.get('description', '') if main_char else ''
        
        npc_list = characters[1:] if len(characters) > 1 else []
        npc_str = ''
        if npc_list:
            npc_descriptions = []
            for npc in npc_list[:5]:
                npc_name = npc.get('name', '')
                npc_role = npc.get('role', '')
                npc_desc = npc.get('description', '')
                npc_descriptions.append(f"{npc_name} ({npc_role}): {npc_desc if npc_desc else '–ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –º–∏—Ä–∞'}")
            npc_str = '\n'.join(npc_descriptions)
        else:
            npc_str = '–°–æ–∑–¥–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö NPC –ø–æ —Ö–æ–¥—É –∏—Å—Ç–æ—Ä–∏–∏'
        
        pov_instruction = {
            'first': f'–û—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ({mc_name}). –ò–ì–†–û–ö –ò–ì–†–ê–ï–¢ –ó–ê {mc_name.upper()}.',
            'third': f'–û—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞. –ò–ì–†–û–ö –ö–û–ù–¢–†–û–õ–ò–†–£–ï–¢ {mc_name.upper()}.',
            'love-interest': f'–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å. –ò–≥—Ä–æ–∫ –≤–ª—é–±–ª—è–µ—Ç—Å—è –≤ {mc_name}.'
        }.get(narrative_mode, f'–ò–≥—Ä–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç {mc_name}')
        
        system_prompt = f"""–¢–´ –¢–ê–õ–ê–ù–¢–õ–ò–í–´–ô –ü–ò–°–ê–¢–ï–õ–¨ –ò –í–ï–î–£–©–ò–ô –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ô –ò–ì–†–´.

–ñ–∞–Ω—Ä: {genre}. –†–µ–π—Ç–∏–Ω–≥: {rating}. –ú–∏—Ä: {world_setting or '—Ñ—ç–Ω—Ç–µ–∑–∏'}

–ì–õ–ê–í–ù–´–ô –ü–ï–†–°–û–ù–ê–ñ (—É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∏–≥—Ä–æ–∫–æ–º):
‚Ä¢ –ò–º—è: {mc_name}
‚Ä¢ –†–æ–ª—å: {mc_role}
{f'‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {mc_desc}' if mc_desc else ''}
‚Ä¢ ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏—è/–º—ã—Å–ª–∏/—Å–ª–æ–≤–∞ –∑–∞ {mc_name}!

NPC (—Ç—ã –∏–≥—Ä–∞–µ—à—å –∑–∞ –Ω–∏—Ö, —Å–æ–∑–¥–∞–π –∏—Ö –≤ –º–∏—Ä–µ):
{npc_str}

–í–ê–ñ–ù–û –ü–†–û NPC: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ NPC –≤—ã—à–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö –≤ –∏—Å—Ç–æ—Ä–∏–∏, —Å–æ–∑–¥–∞–π –¥–ª—è –Ω–∏—Ö —Ä–æ–ª–∏ –≤ –º–∏—Ä–µ, –¥–∞–π –∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é. –ï—Å–ª–∏ NPC –Ω–µ —É–∫–∞–∑–∞–Ω—ã ‚Äî —Å–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ —Ö–æ–¥—É —Å—é–∂–µ—Ç–∞.

–ü–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ: {pov_instruction}

–°–¢–ò–õ–¨ –ü–û–í–ï–°–¢–í–û–í–ê–ù–ò–Ø:
‚Ä¢ –ü–∏—à–∏ –∫–∞–∫ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–≤—Ç–æ—Ä: –∂–∏–≤–æ, —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º, —Å –∏—Ä–æ–Ω–∏–µ–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —è–∑—ã–∫, —Å–ª–µ–Ω–≥, –º–µ—Å—Ç–∞–º–∏ –º–∞—Ç (–ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É)
‚Ä¢ –î–∏–∞–ª–æ–≥–∏ –ù–ü–° –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –£–ù–ò–ö–ê–õ–¨–ù–´–ú–ò: —É –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π –≥–æ–ª–æ—Å, –º–∞–Ω–µ—Ä—ã, —Ä–µ—á–µ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π –¥–µ—Ç–∞–ª–∏: –∑–∞–ø–∞—Ö–∏, –∑–≤—É–∫–∏, —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è, –º–∏–º–∏–∫—É, –∂–µ—Å—Ç—ã
‚Ä¢ –î–æ–±–∞–≤–ª—è–π —é–º–æ—Ä –¥–∞–∂–µ –≤ —Å–µ—Ä—å—ë–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã (–∫–∞–∫ Witcher, Guardians of Galaxy)
‚Ä¢ –≠–º–æ—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–π —á–µ—Ä–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–µ –Ω–∞–∑—ã–≤–∞–π –ø—Ä—è–º–æ
‚Ä¢ –ò–∑–±–µ–≥–∞–π —à—Ç–∞–º–ø–æ–≤ —Ç–∏–ø–∞ "—Å–µ—Ä–¥—Ü–µ –±–µ—à–µ–Ω–æ –±–∏–ª–æ—Å—å", "–≥–ª–∞–∑–∞ –∑–∞–≥–æ—Ä–µ–ª–∏—Å—å" ‚Äî –±—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–µ–µ

–õ–ò–¢–ï–†–ê–¢–£–†–ù–´–ï –ü–†–ò–Å–ú–´ (–∏—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç–∏–≤–Ω–æ):
‚Ä¢ –ú–µ—Ç–∞—Ñ–æ—Ä—ã –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—Å–≤–µ–∂–∏–µ, –Ω–µ –∏–∑–±–∏—Ç—ã–µ)
‚Ä¢ –°–∞—Ä–∫–∞–∑–º –∏ –∏—Ä–æ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–∞—Ö –ù–ü–°
‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Å—Ç (—Å–µ—Ä—å—ë–∑–Ω–æ–µ —Å –∞–±—Å—É—Ä–¥–Ω—ã–º)
‚Ä¢ –ù–µ–¥–æ—Å–∫–∞–∑–∞–Ω–Ω–æ—Å—Ç—å –∏ –ø–æ–¥—Ç–µ–∫—Å—Ç
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–π, –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π (show, don't tell)

–ü–ï–†–°–û–ù–ê–ñ–ò:
‚Ä¢ –ù–ü–° ‚Äî –ñ–ò–í–´–ï –õ–Æ–î–ò —Å –∂–µ–ª–∞–Ω–∏—è–º–∏, —Å—Ç—Ä–∞—Ö–∞–º–∏, –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è–º–∏
‚Ä¢ –û–Ω–∏ –ù–ï –∫–∞—Ä—Ç–æ–Ω–∫–∏: —Å–ø–æ—Ä—è—Ç, –æ—à–∏–±–∞—é—Ç—Å—è, –º–µ–Ω—è—é—Ç –º–Ω–µ–Ω–∏–µ
‚Ä¢ –ü–æ–º–Ω—è—Ç –ø—Ä–æ—à–ª—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å {mc_name}
‚Ä¢ –ò–º–µ—é—Ç —Å–≤–æ–∏ –º–æ—Ç–∏–≤—ã, –Ω–µ –≤—Å–µ–≥–¥–∞ –æ—á–µ–≤–∏–¥–Ω—ã–µ –∏–≥—Ä–æ–∫—É

–°–Æ–ñ–ï–¢ –ò –°–í–û–ë–û–î–ê:
‚Ä¢ –ù–ï –Ω–∞–≤—è–∑—ã–≤–∞–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—É—Ç—å ‚Äî –¥–∞–π –∏–≥—Ä–æ–∫—É –≤—ã–±–æ—Ä
‚Ä¢ –ú–∏—Ä –†–ï–ê–ì–ò–†–£–ï–¢ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è {mc_name} –ª–æ–≥–∏—á–Ω–æ –∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ
‚Ä¢ –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏
‚Ä¢ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã > –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å

–†–ï–ô–¢–ò–ù–ì {rating}:
‚Ä¢ –ë–ï–ó –¶–ï–ù–ó–£–†–´: –Ω–∞—Å–∏–ª–∏–µ, —Å–µ–∫—Å, –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏ ‚Äî –≤—Å—ë –ø–æ–¥—Ä–æ–±–Ω–æ, –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ
‚Ä¢ –ò–Ω—Ç–∏–º–Ω—ã–µ —Å—Ü–µ–Ω—ã: –¥–µ—Ç–∞–ª—å–Ω–æ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–µ –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ
‚Ä¢ –ú–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–µ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–æ

–î–õ–ò–ù–ê –ò –¢–ï–ú–ü:
‚Ä¢ 600-1200 —Å–ª–æ–≤ –Ω–∞ —Ö–æ–¥ (–ø–æ–¥—Ä–æ–±–Ω–æ, –Ω–æ –¥–∏–Ω–∞–º–∏—á–Ω–æ)
‚Ä¢ –ú–µ–Ω—è–π —Ç–µ–º–ø: –±—ã—Å—Ç—Ä–æ –≤ —ç–∫—à–µ–Ω–µ, –º–µ–¥–ª–µ–Ω–Ω–æ –≤ –¥—Ä–∞–º–µ
‚Ä¢ –ó–∞–∫–∞–Ω—á–∏–≤–∞–π –Ω–∞ –∫—Ä—é—á–∫–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–µ –∫ –∏–≥—Ä–æ–∫—É

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
**[–ú–ï–¢–ê]**
‚è∞ –í—Ä–µ–º—è/–º–µ—Å—Ç–æ: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ: "23:47, –ø–æ–¥–≤–∞–ª –∑–∞–±—Ä–æ—à–µ–Ω–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏"]
üé¨ –°–æ–±—ã—Ç–∏—è: [2-3 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è —Ö–æ–¥–∞, –∫—Ä–∞—Ç–∫–æ]
üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è: {mc_name} —Å –ù–ü–° (—á–∏—Å–ª–æ –æ—Ç -100 –¥–æ +100, –∏–∑–º–µ–Ω–µ–Ω–∏–µ +/-)
üß† –≠–º–æ—Ü–∏–∏: [—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ù–ü–°, –ù–ï {mc_name}]
üîç –ù–æ–≤—ã–µ —Ñ–∞–∫—Ç—ã: [—á—Ç–æ —É–∑–Ω–∞–ª–∏]
‚öîÔ∏è –°–∏—Ç—É–∞—Ü–∏—è: [–≤—Ä–∞–≥–∏, —Å–æ—é–∑–Ω–∏–∫–∏, —Ä–µ—Å—É—Ä—Å—ã –µ—Å–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ]
‚ùì –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã: [—á—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ]
üéØ –í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: [–ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–≥—Ä–æ–∫—É, 2-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞]

---

[–ò–°–¢–û–†–ò–Ø: –Ø—Ä–∫–æ, –ø–æ–¥—Ä–æ–±–Ω–æ, –∂–∏–≤–æ. 3-7 –∞–±–∑–∞—Ü–µ–≤. –î–∏–∞–ª–æ–≥–∏ + –æ–ø–∏—Å–∞–Ω–∏—è + –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞. –ù–ï –ü–ò–®–ò –ó–ê {mc_name}!]

–í –∫–æ–Ω—Ü–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–æ–¥–≤–µ–¥–∏ –∫ –º–æ–º–µ–Ω—Ç—É –≤—ã–±–æ—Ä–∞ –∏–ª–∏ —Ä–µ–∞–∫—Ü–∏–∏ {mc_name}."""
        
        messages = [{'role': 'system', 'content': system_prompt}]
        
        for entry in history[-8:]:
            messages.append({'role': 'user', 'content': entry.get('user', '')})
            messages.append({'role': 'assistant', 'content': entry.get('ai', '')})
        
        if user_action:
            if '@[–ú–ï–¢–ê-–ö–û–ú–ê–ù–î–ê]:' in user_action:
                meta_cmd, player_action = user_action.split('\n\n', 1)
                meta_text = meta_cmd.replace('@[–ú–ï–¢–ê-–ö–û–ú–ê–ù–î–ê]:', '').strip()
                messages.append({'role': 'user', 'content': f"üé® –°–¢–ò–õ–ò–°–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø: {meta_text}\n\n{mc_name}: {player_action}"})
            else:
                messages.append({'role': 'user', 'content': f"{mc_name}: {user_action}"})
        else:
            messages.append({'role': 'user', 'content': "–ù–∞—á–Ω–∏ –∏–≥—Ä—É. –ü–µ—Ä–≤–∞—è —Å—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ó–ê–¶–ï–ü–ò–¢–¨: –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –∑–∞–≥–∞–¥–∫–∞, –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏–ª–∏ —è—Ä–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂."})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cache_key = get_cache_key(json.dumps(messages, ensure_ascii=False))
        cached = get_from_cache(cache_key)
        if cached:
            return {
                'statusCode': 200,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                    'X-Cache': 'HIT'
                },
                'isBase64Encoded': False,
                'body': json.dumps({'story': cached})
            }
        
        api_key = os.environ.get('DEEPSEEK_API_KEY')
        
        if not api_key:
            return {
                'statusCode': 500,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({'error': 'DeepSeek API key not configured'})
            }
        
        response = requests.post(
            'https://api.deepseek.com/v1/chat/completions',
            headers={
                'Authorization': f'Bearer {api_key}',
                'Content-Type': 'application/json'
            },
            json={
                'model': 'deepseek-chat',
                'messages': messages,
                'temperature': 0.9,
                'max_tokens': 2000,
                'top_p': 0.95,
                'frequency_penalty': 0.3,
                'presence_penalty': 0.3
            },
            timeout=30
        )
        
        if not response.ok:
            return {
                'statusCode': response.status_code,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({'error': f'DeepSeek API error: {response.text}'})
            }
        
        result = response.json()
        story_text = result['choices'][0]['message']['content']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        save_to_cache(cache_key, story_text)
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'X-Cache': 'MISS'
            },
            'isBase64Encoded': False,
            'body': json.dumps({'story': story_text})
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': f'Error: {str(e)}'})
        }