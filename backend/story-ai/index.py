"""
Business: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏–π —á–µ—Ä–µ–∑ DeepSeek API
Args: event —Å httpMethod, body (game_data, user_action, history)
Returns: HTTP response —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
"""

import json
import os
from typing import Dict, Any
import requests

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    try:
        method: str = event.get('httpMethod', 'POST')
        
        if method == 'OPTIONS':
            return {
                'statusCode': 200,
                'headers': {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'POST, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type, X-User-Id',
                    'Access-Control-Max-Age': '86400'
                },
                'body': ''
            }
        
        if method != 'POST':
            return {
                'statusCode': 405,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({'error': 'Method not allowed'})
            }
        
        body_data = json.loads(event.get('body', '{}'))
        
        game_settings = body_data.get('game_settings', {})
        user_action = body_data.get('user_action', '')
        history = body_data.get('history', [])
        
        genre = game_settings.get('genre', '—Ñ—ç–Ω—Ç–µ–∑–∏')
        characters = game_settings.get('characters', [])
        rating = game_settings.get('rating', '18+')
        tone = game_settings.get('tone', 3)
        world_setting = game_settings.get('world', '')
        
        tone_description = '–ø—Ä–æ—Å—Ç—ã–µ —Ñ—Ä–∞–∑—ã' if tone <= 2 else '—É–º–µ—Ä–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å' if tone <= 4 else '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Å—Ç–∏–ª—å'
        
        system_prompt = f"""–¢–´ –í–ï–î–£–©–ò–ô –ò–ì–†–´ –í –ñ–ê–ù–†–ï {genre.upper()}. –†–ï–ô–¢–ò–ù–ì: {rating}.

üåç –°–ï–¢–¢–ò–ù–ì –ú–ò–†–ê:
{world_setting if world_setting else f'–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∏—Ä –∂–∞–Ω—Ä–∞ {genre}'}

üë• –ü–ï–†–°–û–ù–ê–ñ–ò –ò–ì–†–û–ö–ê:
{chr(10).join([f"‚Ä¢ {c.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} ‚Äî {c.get('role', '')}: {c.get('description', '')}" for c in characters]) if characters else '–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã'}

‚ö° –¢–í–û–Ø –ó–ê–î–ê–ß–ê –ö–ê–ö –ú–ê–°–¢–ï–†–ê:

1. –°–û–ó–î–ê–ù–ò–ï –°–¶–ï–ù–´:
   - –°–æ–∑–¥–∞–π —è—Ä–∫–∏–π –º–∏—Ä, —Å—é–∂–µ—Ç –∏ —Å–æ–±—ã—Ç–∏—è
   - –û–±—ä–µ–¥–∏–Ω–∏ –∏—Ö –≤ –∂–∏–≤—É—é —Å—Ü–µ–Ω—É
   - –ü–æ–¥–≤–µ–¥–∏ –∏–≥—Ä–æ–∫–∞ –∫ –≤—ã–±–æ—Ä—É –≤ –∫–æ–Ω—Ü–µ

2. –û–ü–ò–°–ê–ù–ò–Ø:
   - –ü–û–î–†–û–ë–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –æ–¥–µ–∂–¥—ã
   - –ò—Å–ø–æ–ª—å–∑—É–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏—ë–º—ã: –º–µ—Ç–∞—Ñ–æ—Ä—ã, —ç–ø–∏—Ç–µ—Ç—ã, —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –∏—Ä–æ–Ω–∏—é, –æ–∫—Å—é–º–æ—Ä–æ–Ω, –≥–∏–ø–µ—Ä–±–æ–ª—É, —Å–∏–º–≤–æ–ª–∏–∑–º, —Å–∞—Ä–∫–∞–∑–º
   - –°—Ç–∏–ª—å: {tone_description}

3. –î–ò–ê–õ–û–ì–ò –ò NPC:
   - –î–∏–∞–ª–æ–≥–∏ –∂–∏–≤—ã–µ + –º–∞—Ç + —Å–ª–µ–Ω–≥ + —é–º–æ—Ä
   - NPC –ñ–ò–í–´–ï –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ, –ø–æ–º–Ω—è—Ç —Å–ª–æ–≤–∞
   - NPC –∏–º–µ—é—Ç –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä

4. –¢–û–ù–ê–õ–¨–ù–û–°–¢–¨:
   - {rating} –ë–ï–ó –¶–ï–ù–ó–£–†–´ (—Å–µ–∫—Å-—Å—Ü–µ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã)
   - –ù–µ –Ω–∞—Å—Ç–∞–∏–≤–∞–π –Ω–∞ –æ–¥–Ω–æ–π —Å—é–∂–µ—Ç–Ω–æ–π –ª–∏–Ω–∏–∏
   - –°–µ—Ä—å—ë–∑–Ω–æ–µ + —é–º–æ—Ä = –∂–∏–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è

üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê:

‚ùå –ù–ï –¥–µ–π—Å—Ç–≤—É–π –∑–∞ –∏–≥—Ä–æ–∫–∞
‚ùå –ù–ï –ø—Ä–∏–Ω–∏–º–∞–π —Ä–µ—à–µ–Ω–∏—è –∑–∞ –∏–≥—Ä–æ–∫–∞
‚ùå –ù–ï –≤–µ–¥–∏ –¥–∏–∞–ª–æ–≥–∏ –∑–∞ –∏–≥—Ä–æ–∫–∞
‚ùå –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ –¥–æ—Å–ª–æ–≤–Ω–æ

‚úÖ –ú–∏—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞
‚úÖ –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏–π –≤–∞–∂–Ω—ã
‚úÖ –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é

üìä –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:

**[–ú–ï–¢–ê]**
‚è∞ –í—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ: [—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –ª–æ–∫–∞—Ü–∏—è]
üé¨ –°–æ–±—ã—Ç–∏—è —Ö–æ–¥–∞: 
   1. [–ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ]
   2. [–≤—Ç–æ—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ]
üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è: [NPC] - [–ø—Ä–æ—Ü–µ–Ω—Ç]%
üß† –≠–º–æ—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: [NPC] - [—Å–æ—Å—Ç–æ—è–Ω–∏–µ]
üîç –ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: [—Ñ–∞–∫—Ç—ã/—É–ª–∏–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º]
‚öîÔ∏è –¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: [–≤—Ä–∞–≥–∏, —Å–æ—é–∑–Ω–∏–∫–∏, —Ä–µ—Å—É—Ä—Å—ã]
‚ùì –ù–µ—Ä–µ—à—ë–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: [—Å–ø–∏—Å–æ–∫]
üéØ –ü–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥: [–≤–∞—Ä–∏–∞–Ω—Ç—ã]
üìã –í–Ω–µ–¥—Ä—ë–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: [—Å–ø–∏—Å–æ–∫]
üßë‚Äçüíº NPC –≤—Å—Ç—Ä–µ—á–µ–Ω–æ: [–∏–º—è] - –æ—Ç–Ω–æ—à–µ–Ω–∏—è [—É—Ä–æ–≤–µ–Ω—å]

---

[–ò–°–¢–û–†–ò–Ø - 2-4 –∞–±–∑–∞—Ü–∞ —Å —è—Ä–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏]

[–ó–∞–∫–æ–Ω—á–∏ –≤—ã–±–æ—Ä–æ–º –¥–ª—è –∏–≥—Ä–æ–∫–∞]

–õ–ò–ú–ò–¢ META: 500-600 —Å–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—é–∂–µ—Ç–∞.
–°–¢–†–û–ì–û —Å–ª–µ–¥—É–π —Å–µ—Ç—Ç–∏–Ω–≥—É "{world_setting if world_setting else genre}"!"""
        
        messages = [{'role': 'system', 'content': system_prompt}]
        
        for entry in history[-10:]:
            messages.append({'role': 'user', 'content': entry.get('user', '')})
            messages.append({'role': 'assistant', 'content': entry.get('ai', '')})
        
        if user_action:
            messages.append({'role': 'user', 'content': f"–î–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞: {user_action}"})
        else:
            messages.append({'role': 'user', 'content': "–ù–∞—á–Ω–∏ –∏–≥—Ä—É. –û–ø–∏—à–∏ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É."})
        
        api_key = os.environ.get('DEEPSEEK_API_KEY')
        
        if not api_key:
            return {
                'statusCode': 500,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({'error': 'DeepSeek API key not configured'})
            }
        
        response = requests.post(
            'https://api.deepseek.com/v1/chat/completions',
            headers={
                'Authorization': f'Bearer {api_key}',
                'Content-Type': 'application/json'
            },
            json={
                'model': 'deepseek-chat',
                'messages': messages,
                'temperature': 0.8,
                'max_tokens': 1500
            },
            timeout=30
        )
        
        if not response.ok:
            return {
                'statusCode': response.status_code,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({'error': f'DeepSeek API error: {response.text}'})
            }
        
        result = response.json()
        story_text = result['choices'][0]['message']['content']
        
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'isBase64Encoded': False,
            'body': json.dumps({'story': story_text})
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': f'Error: {str(e)}'})
        }
