"""
Business: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏–π —á–µ—Ä–µ–∑ DeepSeek API
Args: event —Å httpMethod, body (game_data, user_action, history)
Returns: HTTP response —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
"""

import json
import os
import hashlib
import time
from typing import Dict, Any
import requests

# –ö–µ—à
CACHE: Dict[str, tuple] = {}
CACHE_TTL = 1800  # 30 –º–∏–Ω—É—Ç

def get_cache_key(prompt: str) -> str:
    return hashlib.md5(prompt.encode('utf-8')).hexdigest()

def get_from_cache(key: str) -> str | None:
    if key in CACHE:
        cached_time, cached_value = CACHE[key]
        if time.time() - cached_time < CACHE_TTL:
            return cached_value
        else:
            del CACHE[key]
    return None

def save_to_cache(key: str, value: str):
    CACHE[key] = (time.time(), value)
    if len(CACHE) > 50:
        current_time = time.time()
        expired_keys = [k for k, (t, _) in CACHE.items() if current_time - t >= CACHE_TTL]
        for k in expired_keys:
            del CACHE[k]

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    try:
        method: str = event.get('httpMethod', 'POST')
        
        if method == 'OPTIONS':
            return {
                'statusCode': 200,
                'headers': {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'POST, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type, X-User-Id',
                    'Access-Control-Max-Age': '86400'
                },
                'body': ''
            }
        
        if method != 'POST':
            return {
                'statusCode': 405,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({'error': 'Method not allowed'})
            }
        
        body_data = json.loads(event.get('body', '{}'))
        
        game_settings = body_data.get('game_settings', {})
        user_action = body_data.get('user_action', '')
        history = body_data.get('history', [])
        
        genre = game_settings.get('genre', '—Ñ—ç–Ω—Ç–µ–∑–∏')
        setting = body_data.get('setting', '')
        characters = game_settings.get('initialCharacters', [])
        rating = game_settings.get('rating', '18+')
        narrative_mode = game_settings.get('narrativeMode', 'third')
        role = game_settings.get('role', 'hero')
        world_setting = body_data.get('setting', '')
        
        main_char = characters[0] if characters else None
        mc_name = main_char.get('name', '–ò–≥—Ä–æ–∫') if main_char else '–ò–≥—Ä–æ–∫'
        mc_role = main_char.get('role', '–≥–µ—Ä–æ–π') if main_char else '–≥–µ—Ä–æ–π'
        mc_desc = main_char.get('description', '') if main_char else ''
        
        npc_list = characters[1:] if len(characters) > 1 else []
        npc_str = ''
        if npc_list:
            npc_descriptions = []
            for npc in npc_list[:5]:
                npc_name = npc.get('name', '')
                npc_role = npc.get('role', '')
                npc_desc = npc.get('description', '')
                npc_scenes = npc.get('scenes', '')
                npc_quotes = npc.get('quotes', '')
                npc_ideas = npc.get('ideas', '')
                
                npc_info = f"{npc_name} ({npc_role})"
                if npc_desc:
                    npc_info += f"\n  –û–ø–∏—Å–∞–Ω–∏–µ: {npc_desc}"
                if npc_scenes:
                    npc_info += f"\n  –°—Ü–µ–Ω—ã: {npc_scenes}"
                if npc_quotes:
                    npc_info += f"\n  –§—Ä–∞–∑—ã: {npc_quotes}"
                if npc_ideas:
                    npc_info += f"\n  –ò–¥–µ–∏: {npc_ideas}"
                
                npc_descriptions.append(npc_info)
            npc_str = '\n\n'.join(npc_descriptions)
        else:
            npc_str = '–°–æ–∑–¥–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö NPC –ø–æ —Ö–æ–¥—É –∏—Å—Ç–æ—Ä–∏–∏'
        
        pov_instruction = {
            'first': f'–û—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ({mc_name}). –ò–ì–†–û–ö –ò–ì–†–ê–ï–¢ –ó–ê {mc_name.upper()}.',
            'third': f'–û—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞. –ò–ì–†–û–ö –ö–û–ù–¢–†–û–õ–ò–†–£–ï–¢ {mc_name.upper()}.',
            'love-interest': f'–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å. –ò–≥—Ä–æ–∫ –≤–ª—é–±–ª—è–µ—Ç—Å—è –≤ {mc_name}.'
        }.get(narrative_mode, f'–ò–≥—Ä–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç {mc_name}')
        
        system_prompt = f"""–¢–´ ‚Äî –≤–µ–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ñ–∞–Ω—Ä: {genre}. –†–µ–π—Ç–∏–Ω–≥: {rating}. –ú–∏—Ä: {world_setting or '—Ñ—ç–Ω—Ç–µ–∑–∏'}

–ü–ï–†–°–û–ù–ê–ñ–ò:
‚Ä¢ {mc_name} ({mc_role}) ‚Äî –ò–ì–†–û–ö. ‚ö†Ô∏è –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–∏—à–∏ –∑–∞ –Ω–µ–≥–æ!
{f'  –û–ø–∏—Å–∞–Ω–∏–µ: {mc_desc}' if mc_desc else ''}
‚Ä¢ NPC (—Ç—ã –∑–∞ –Ω–∏—Ö –∏–≥—Ä–∞–µ—à—å):
{npc_str}

NPC ‚Äî –ñ–ò–í–´–ï:
‚Ä¢ –ò–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –æ–ø–∏—Å–∞—Ç—å NPC –≤ —Å–µ—Ç—Ç–∏–Ω–≥–µ: —Å—Ü–µ–Ω—ã üìΩÔ∏è, —Ü–∏—Ç–∞—Ç—ã üí¨, –∏–¥–µ–∏ ‚ú®, –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –ì–ì üíñ
‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –ì–ì ‚Äî –º–Ω–µ–Ω–∏–µ, —á—É–≤—Å—Ç–≤–∞, —Ä–µ–∞–∫—Ü–∏–∏ NPC (–ø—É–±–ª–∏—á–Ω—ã–µ/—Ç–∞–π–Ω—ã–µ, –º–µ–Ω—è—é—â–∏–µ—Å—è)
‚Ä¢ –í–ê–ñ–ù–û: –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ! NPC –≤–µ–¥—ë—Ç —Å–µ–±—è —Å–æ–≥–ª–∞—Å–Ω–æ –æ–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ NPC —Ä–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è {mc_name}: –ø–æ–º–Ω—è—Ç, –∑–ª—è—Ç—Å—è, –≤–ª—é–±–ª—è—é—Ç—Å—è, –º—Å—Ç—è—Ç
‚Ä¢ –£ NPC —Å–≤–æ–∏ —Ü–µ–ª–∏, —Å–µ–∫—Ä–µ—Ç—ã, –º–æ—Ç–∏–≤—ã ‚Äî –Ω–µ –≤—Å–µ –ª—é–±—è—Ç –≥–µ—Ä–æ—è
‚Ä¢ –†–µ—à–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –º–µ–Ω—è—é—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è: –ø–æ–º–æ–≥ ‚Üí +–¥–æ–≤–µ—Ä–∏–µ, –ø—Ä–µ–¥–∞–ª ‚Üí -–¥–æ–≤–µ—Ä–∏–µ/–º–µ—Å—Ç—å

–°–¢–ò–õ–¨:
‚Ä¢ –ñ–∏–≤–æ, —Å –∏—Ä–æ–Ω–∏–µ–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —è–∑—ã–∫, –∏–Ω–æ–≥–¥–∞ –º–∞—Ç
‚Ä¢ –î–∏–∞–ª–æ–≥–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ NPC (—Å–≤–æ–π –≥–æ–ª–æ—Å, –º–∞–Ω–µ—Ä—ã)
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–π —ç–º–æ—Ü–∏–∏ —á–µ—Ä–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è: –∫—Ä–∞—Å–Ω–µ–µ—Ç, —Å–∂–∏–º–∞–µ—Ç –∫—É–ª–∞–∫–∏, –æ—Ç–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è
‚Ä¢ –î–µ—Ç–∞–ª–∏: –∑–∞–ø–∞—Ö–∏, –∑–≤—É–∫–∏, –º–∏–º–∏–∫–∞
‚Ä¢ –ò–∑–±–µ–≥–∞–π —à—Ç–∞–º–ø–æ–≤ ("—Å–µ—Ä–¥—Ü–µ –±–∏–ª–æ—Å—å", "–≥–ª–∞–∑–∞ –∑–∞–≥–æ—Ä–µ–ª–∏—Å—å")

–°–Æ–ñ–ï–¢:
‚Ä¢ –î–∞–π –∏–≥—Ä–æ–∫—É –≤—ã–±–æ—Ä ‚Äî –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–π –ø—É—Ç—å
‚Ä¢ –ú–∏—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –ª–æ–≥–∏—á–Ω–æ –∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ
‚Ä¢ –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏

–†–ï–ô–¢–ò–ù–ì {rating}: –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã, –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ. –ú–∞—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.

–§–û–†–ú–ê–¢:
**[–ú–ï–¢–ê]**
‚è∞ –í—Ä–µ–º—è/–º–µ—Å—Ç–æ: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ]
üé¨ –°–æ–±—ã—Ç–∏—è: [2-3 –∫–ª—é—á–µ–≤—ã—Ö]
üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è: {mc_name} —Å NPC (-100 –¥–æ +100, –∏–∑–º–µ–Ω–µ–Ω–∏–µ)
üß† –≠–º–æ—Ü–∏–∏ NPC: [—Å–æ—Å—Ç–æ—è–Ω–∏–µ]
üîç –§–∞–∫—Ç—ã: [—á—Ç–æ —É–∑–Ω–∞–ª–∏]
‚öîÔ∏è –°–∏—Ç—É–∞—Ü–∏—è: [–≤—Ä–∞–≥–∏/—Å–æ—é–∑–Ω–∏–∫–∏/—Ä–µ—Å—É—Ä—Å—ã]
üéØ –í–∞—Ä–∏–∞–Ω—Ç—ã: [2-3 –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–≥—Ä–æ–∫—É]

---

[–ò–°–¢–û–†–ò–Ø: 3-7 –∞–±–∑–∞—Ü–µ–≤. –î–∏–∞–ª–æ–≥–∏ + –æ–ø–∏—Å–∞–Ω–∏—è + –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞. 600-1200 —Å–ª–æ–≤. –ù–ï –ü–ò–®–ò –ó–ê {mc_name}!]

–ó–∞–∫–∞–Ω—á–∏–≤–∞–π –Ω–∞ –º–æ–º–µ–Ω—Ç–µ –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–µ –∫ –∏–≥—Ä–æ–∫—É."""
        
        messages = [{'role': 'system', 'content': system_prompt}]
        
        for entry in history[-8:]:
            messages.append({'role': 'user', 'content': entry.get('user', '')})
            messages.append({'role': 'assistant', 'content': entry.get('ai', '')})
        
        if user_action:
            if '@[–ú–ï–¢–ê-–ö–û–ú–ê–ù–î–ê]:' in user_action:
                meta_cmd, player_action = user_action.split('\n\n', 1)
                meta_text = meta_cmd.replace('@[–ú–ï–¢–ê-–ö–û–ú–ê–ù–î–ê]:', '').strip()
                messages.append({'role': 'user', 'content': f"üé® –°–¢–ò–õ–ò–°–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø: {meta_text}\n\n{mc_name}: {player_action}"})
            else:
                messages.append({'role': 'user', 'content': f"{mc_name}: {user_action}"})
        else:
            messages.append({'role': 'user', 'content': "–ù–∞—á–Ω–∏ –∏–≥—Ä—É. –ü–µ—Ä–≤–∞—è —Å—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ó–ê–¶–ï–ü–ò–¢–¨: –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –∑–∞–≥–∞–¥–∫–∞, –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏–ª–∏ —è—Ä–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂."})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cache_key = get_cache_key(json.dumps(messages, ensure_ascii=False))
        cached = get_from_cache(cache_key)
        if cached:
            return {
                'statusCode': 200,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                    'X-Cache': 'HIT'
                },
                'isBase64Encoded': False,
                'body': json.dumps({'story': cached})
            }
        
        api_key = os.environ.get('DEEPSEEK_API_KEY')
        
        if not api_key:
            return {
                'statusCode': 500,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({'error': 'DeepSeek API key not configured'})
            }
        
        response = requests.post(
            'https://api.deepseek.com/v1/chat/completions',
            headers={
                'Authorization': f'Bearer {api_key}',
                'Content-Type': 'application/json'
            },
            json={
                'model': 'deepseek-chat',
                'messages': messages,
                'temperature': 0.9,
                'max_tokens': 2000,
                'top_p': 0.95,
                'frequency_penalty': 0.3,
                'presence_penalty': 0.3
            },
            timeout=30
        )
        
        if not response.ok:
            return {
                'statusCode': response.status_code,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({'error': f'DeepSeek API error: {response.text}'})
            }
        
        result = response.json()
        story_text = result['choices'][0]['message']['content']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        save_to_cache(cache_key, story_text)
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'X-Cache': 'MISS'
            },
            'isBase64Encoded': False,
            'body': json.dumps({'story': story_text})
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': f'Error: {str(e)}'})
        }