import json
import os
import hashlib
import time
from typing import Dict, Any

# –ü—Ä–æ—Å—Ç–æ–π in-memory –∫–µ—à (–∂–∏–≤—ë—Ç –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ –æ–¥–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ)
CACHE: Dict[str, tuple] = {}
CACHE_TTL = 3600  # 1 —á–∞—Å
CACHE_STATS = {'hits': 0, 'misses': 0}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

def get_cache_key(prompt: str) -> str:
    """–°–æ–∑–¥–∞—ë—Ç —Ö–µ—à-–∫–ª—é—á –¥–ª—è –∫–µ—à–∞"""
    return hashlib.md5(prompt.encode('utf-8')).hexdigest()

def get_from_cache(key: str) -> str | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–∑ –∫–µ—à–∞ –µ—Å–ª–∏ –æ–Ω —Å–≤–µ–∂–∏–π"""
    import sys
    if key in CACHE:
        cached_time, cached_value = CACHE[key]
        if time.time() - cached_time < CACHE_TTL:
            CACHE_STATS['hits'] += 1
            hit_rate = CACHE_STATS['hits']/(CACHE_STATS['hits']+CACHE_STATS['misses'])*100
            print(f"CACHE HIT! Stats: {CACHE_STATS['hits']} hits, {CACHE_STATS['misses']} misses, hit rate: {hit_rate:.1f}%", file=sys.stderr)
            return cached_value
        else:
            del CACHE[key]
    CACHE_STATS['misses'] += 1
    return None

def save_to_cache(key: str, value: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –∫–µ—à"""
    CACHE[key] = (time.time(), value)
    # –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –∫–µ—à —Ä–∞–∑—Ä–æ—Å—Å—è
    if len(CACHE) > 100:
        current_time = time.time()
        expired_keys = [k for k, (t, _) in CACHE.items() if current_time - t >= CACHE_TTL]
        for k in expired_keys:
            del CACHE[k]

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π —á–µ—Ä–µ–∑ GPT-4o API
    Args: event —Å httpMethod, body (genre, setting, difficulty, userAction, history, gameId)
    Returns: HTTP response —Å –Ω–æ–≤—ã–º —Å—é–∂–µ—Ç–æ–º
    '''
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'Method not allowed'}),
            'isBase64Encoded': False
        }
    
    api_key = os.environ.get('CLAUDE_API_KEY')
    if not api_key:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'CLAUDE_API_KEY not configured'}),
            'isBase64Encoded': False
        }
    
    body_data = json.loads(event.get('body', '{}'))
    genre = body_data.get('genre', '—Ñ—ç–Ω—Ç–µ–∑–∏')
    setting = body_data.get('setting', '—Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ')
    difficulty = body_data.get('difficulty', 'medium')
    user_action = body_data.get('userAction', '')
    history = body_data.get('history', [])
    characters_list = body_data.get('characters', [])
    setting_description = body_data.get('settingDescription', '')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö NPC –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
    existing_npcs = [c.get('name', '') for c in characters_list if c.get('name')]
    npc_context = f"\n\nüîí –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ò: {', '.join(existing_npcs)}" if existing_npcs else ""
    
    # –£—Å–∏–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∂—ë—Å—Ç–∫–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
    base_rules = f"""üé≠ –ñ–ê–ù–†: {genre}
üåç –°–ï–¢–¢–ò–ù–ì: {setting}
{f"üìñ –û–ü–ò–°–ê–ù–ò–ï –ú–ò–†–ê: {setting_description}" if setting_description else ""}
‚öôÔ∏è –°–õ–û–ñ–ù–û–°–¢–¨: {difficulty}
{npc_context}

üö® –ê–ë–°–û–õ–Æ–¢–ù–´–ï –ó–ê–ü–†–ï–¢–´ (–ù–ê–†–£–®–ï–ù–ò–ï = –ü–†–û–í–ê–õ):
‚ùå –ù–ï –°–ú–ï–ô –¥–æ–±–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤–Ω–µ —Å–µ—Ç—Ç–∏–Ω–≥–∞ "{setting}"
‚ùå –ù–ï –°–ú–ï–ô –¥–æ–±–∞–≤–ª—è—Ç—å –º–∞–≥–∏—é/—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –µ—Å–ª–∏ –∏—Ö –ù–ï–¢ –≤ —Å–µ—Ç—Ç–∏–Ω–≥–µ
‚ùå –ù–ï –°–ú–ï–ô –º–µ–Ω—è—Ç—å –∂–∞–Ω—Ä –∏–ª–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É
‚ùå –ù–ï –°–ú–ï–ô –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∏—à–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö
‚ùå –ù–ï –°–ú–ï–ô –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –º–∏—Ä–∞ –∏–≥—Ä–æ–∫–∞
‚ùå –ù–ï –°–ú–ï–ô –≤–≤–æ–¥–∏—Ç—å –Ω–æ–≤—ã—Ö NPC –±–µ–∑ –∫—Ä–∞–π–Ω–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê:
‚úÖ –°–ª–µ–¥—É–π –¢–û–õ–¨–ö–û —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–∑ —Å–µ—Ç—Ç–∏–Ω–≥–∞ "{setting}"
‚úÖ –ù–æ–≤—ã–µ NPC –¥–æ–ª–∂–Ω—ã –û–†–ì–ê–ù–ò–ß–ù–û –≤–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ –º–∏—Ä
‚úÖ –ï—Å–ª–∏ —Å–µ—Ç—Ç–∏–Ω–≥ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π - –Ω–∏–∫–∞–∫–æ–π –º–∞–≥–∏–∏/—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏
‚úÖ –ï—Å–ª–∏ —Å–µ—Ç—Ç–∏–Ω–≥ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π - –∏—Å–ø–æ–ª—å–∑—É–π –ï–ì–û –ø—Ä–∞–≤–∏–ª–∞, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã–µ
‚úÖ –î–µ–π—Å—Ç–≤–∏—è NPC –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ª–æ–≥–∏—á–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é
‚úÖ –ú–∏—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
‚úÖ NPC –ø–æ–º–Ω—è—Ç –ø—Ä–æ—à–ª—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–∫–æ–º"""
    
    if not history:
        system_prompt = f"""{base_rules}

üìù –ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞–π –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏ (200-250 —Å–ª–æ–≤):
- –û–ø–∏—à–∏ —è—Ä–∫—É—é —Å—Ü–µ–Ω—É –∏–∑ –º–∏—Ä–∞ "{setting}"
- –ü—Ä–µ–¥—Å—Ç–∞–≤—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª–∏
- –í–≤–µ–¥–∏ 1-2 NPC –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¢–û–õ–¨–ö–û –∏–∑ —ç—Ç–æ–≥–æ —Å–µ—Ç—Ç–∏–Ω–≥–∞!)
- –°–æ–∑–¥–∞–π –∏–Ω—Ç—Ä–∏–≥—É –∏–ª–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
- –î–∞–π –∏–≥—Ä–æ–∫—É –ø–æ–Ω—è—Ç–Ω—ã–π –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π

üéØ –°–¢–ò–õ–¨: –ñ–∏–≤–æ–π —è–∑—ã–∫, —ç–º–æ—Ü–∏–∏, –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ. –ë–ï–ó –∫–ª–∏—à–µ."""
        
        user_prompt = f"–ù–∞—á–Ω–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ –∂–∞–Ω—Ä–µ {genre}, —Å–µ—Ç—Ç–∏–Ω–≥: {setting}. –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π –ø—Ä–∞–≤–∏–ª–∞–º!"
    else:
        # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ö–æ–¥–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        recent_history = history[-2:] if len(history) >= 2 else history
        context_parts = []
        for turn in recent_history:
            if isinstance(turn, dict):
                ai_text = turn.get('ai', '')[:150]
                player_text = turn.get('player', '')[:100]
                if ai_text:
                    context_parts.append(f"–ò–ò: {ai_text}")
                if player_text:
                    context_parts.append(f"–ò–≥—Ä–æ–∫: {player_text}")
        
        context = "\n".join(context_parts) if context_parts else "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏"
        
        system_prompt = f"""{base_rules}

üìú –ö–û–ù–¢–ï–ö–°–¢ –ò–°–¢–û–†–ò–ò:
{context}

üéÆ –î–ï–ô–°–¢–í–ò–ï –ò–ì–†–û–ö–ê: {user_action}

üìù –ó–ê–î–ê–ß–ê: –û–ø–∏—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è (200-250 —Å–ª–æ–≤):
- –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã –õ–û–ì–ò–ß–ù–û –≤—ã—Ç–µ–∫–∞—Ç—å –∏–∑ –¥–µ–π—Å—Ç–≤–∏—è
- NPC —Ä–µ–∞–≥–∏—Ä—É—é—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞–º –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
- –£—á–∏—Ç—ã–≤–∞–π –í–°–Æ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é
- –°–æ–∑–¥–∞–≤–∞–π —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—é–∂–µ—Ç–∞, –Ω–µ —Ç–æ–ø—á–∏—Å—å –Ω–∞ –º–µ—Å—Ç–µ
- –î–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã—Ö NPC –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ
- –ù–æ–≤—ã–µ NPC –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ò–ó –°–ï–¢–¢–ò–ù–ì–ê "{setting}"

üéØ –°–¢–ò–õ–¨: –î–∏–Ω–∞–º–∏—á–Ω–æ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –±–µ–∑ –≤–æ–¥—ã. –ü–æ–∫–∞–∂–∏ –º–∏—Ä —á–µ—Ä–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è."""
        
        user_prompt = f"–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞. –°–¢–†–û–ì–û —Å–ª–µ–¥—É–π —Å–µ—Ç—Ç–∏–Ω–≥—É {setting}!"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    full_prompt = f"{system_prompt}\n\n{user_prompt}"
    cache_key = get_cache_key(full_prompt)
    cached_response = get_from_cache(cache_key)
    
    if cached_response:
        import sys
        print(f"Returning cached response, cache size: {len(CACHE)}", file=sys.stderr)
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'X-Cache': 'HIT',
                'X-Cache-Size': str(len(CACHE))
            },
            'body': json.dumps({'story': cached_response}),
            'isBase64Encoded': False
        }
    
    # –ó–∞–ø—Ä–æ—Å –∫ GPT-4o —á–µ—Ä–µ–∑ air.fail
    import urllib.request
    import urllib.error
    import urllib.parse
    
    api_url = "https://api.air.fail/public/text/chatgpt"
    
    form_data = {
        "content": f"{system_prompt}\n\n{user_prompt}",
        "info": json.dumps({
            "version": "gpt-4o",
            "temperature": 0.7,
            "max_tokens": 500
        })
    }
    
    data = urllib.parse.urlencode(form_data).encode('utf-8')
    
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': api_key
    }
    
    req = urllib.request.Request(
        api_url,
        data=data,
        headers=headers,
        method='POST'
    )
    
    try:
        with urllib.request.urlopen(req, timeout=25) as response:
            result = json.loads(response.read().decode('utf-8'))
            
            # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
            import sys
            print(f"air.fail response type: {type(result)}", file=sys.stderr)
            print(f"air.fail response: {json.dumps(result) if not isinstance(result, str) else result[:200]}", file=sys.stderr)
            
            # air.fail –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            if isinstance(result, list) and result:
                story_text = result[-1].get('content', '') if isinstance(result[-1], dict) else str(result[-1])
            elif isinstance(result, dict):
                story_text = result.get('content') or result.get('response') or result.get('text', '')
            else:
                story_text = str(result)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if not story_text or len(story_text.strip()) < 10:
                story_text = f"–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API. –¢–∏–ø: {type(result)}, –¥–∞–Ω–Ω—ã–µ: {str(result)[:200]}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            save_to_cache(cache_key, story_text)
            
            return {
                'statusCode': 200,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                    'X-Cache': 'MISS'
                },
                'body': json.dumps({'story': story_text}),
                'isBase64Encoded': False
            }
    except urllib.error.HTTPError as e:
        error_body = e.read().decode('utf-8')
        return {
            'statusCode': e.code,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': f'GPT API error: {error_body}'}),
            'isBase64Encoded': False
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': f'Unexpected error: {str(e)}'}),
            'isBase64Encoded': False
        }