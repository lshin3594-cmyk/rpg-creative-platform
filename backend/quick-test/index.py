"""
–ë–∏–∑–Ω–µ—Å: –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ò–ò (–æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π)
Args: event (–ø—É—Å—Ç–æ–π)
Returns: –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
"""

import json
import os
import requests
from typing import Dict, Any

API_URL = 'https://functions.poehali.dev/9ea67dc2-c306-4906-bf0f-da435600b92c'

TEST_SCENARIO = {
    'game_settings': {
        'genre': "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –¥—Ä–∞–º–∞",
        'rating': "18+",
        'narrativeMode': "third",
        'initialCharacters': [
            {
                'name': "–ê–ª–µ–∫—Å",
                'role': "–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π",
                'description': "–•—É–¥–æ–∂–Ω–∏–∫, 28 –ª–µ—Ç. 5 –ª–µ—Ç –Ω–∞–∑–∞–¥ —É—à—ë–ª –æ—Ç –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑-–∑–∞ —Å—Ç—Ä–∞—Ö–∞ –±–ª–∏–∑–æ—Å—Ç–∏. –°–æ–∂–∞–ª–µ–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å."
            },
            {
                'name': "–î—ç–Ω–∏—ç–ª",
                'role': "–ë—ã–≤—à–∏–π –≤–æ–∑–ª—é–±–ª–µ–Ω–Ω—ã–π",
                'description': "–ú—É–∑—ã–∫–∞–Ω—Ç, 30 –ª–µ—Ç. –ü–æ—Å–ª–µ —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç–∞–ª –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∏–∞–Ω–∏—Å—Ç–æ–º. –ü—É–±–ª–∏—á–Ω–æ ‚Äî —É—Å–ø–µ—à–µ–Ω, –≤–Ω—É—Ç—Ä–∏ ‚Äî —Å–ª–æ–º–ª–µ–Ω.",
                'scenes': "–ü–æ—Å–ª–µ–¥–Ω—è—è –≤—Å—Ç—Ä–µ—á–∞ 5 –ª–µ—Ç –Ω–∞–∑–∞–¥: –ê–ª–µ–∫—Å —É—Ö–æ–¥–∏—Ç –ø–æ–¥ –¥–æ–∂–¥—ë–º, –î—ç–Ω–∏—ç–ª –∫—Ä–∏—á–∏—Ç –µ–º—É –≤—Å–ª–µ–¥. –î—ç–Ω–∏—ç–ª –ø–∏—à–µ—Ç –∞–ª—å–±–æ–º '–≠—Ö–æ' ‚Äî –∫–∞–∂–¥–∞—è –ø–µ—Å–Ω—è –æ –ø–æ—Ç–µ—Ä–µ.",
                'quotes': "–¢—ã –≤—Å–µ–≥–¥–∞ —É–±–µ–≥–∞–µ—à—å, –∫–æ–≥–¥–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º —Ä–µ–∞–ª—å–Ω–æ. / –Ø –Ω–µ –º–æ–≥—É —Ç–µ–±—è –Ω–µ–Ω–∞–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –±—ã –Ω–∏ –ø—ã—Ç–∞–ª—Å—è.",
                'ideas': "–î—ç–Ω–∏—ç–ª –¥–æ —Å–∏—Ö –ø–æ—Ä –ª—é–±–∏—Ç –ê–ª–µ–∫—Å–∞, –Ω–æ –∑–ª–∏—Ç—Å—è –Ω–∞ –Ω–µ–≥–æ. –•–æ—á–µ—Ç –ø—Ä–∏—á–∏–Ω–∏—Ç—å –±–æ–ª—å, –Ω–æ –º–µ—á—Ç–∞–µ—Ç –æ–±–Ω—è—Ç—å. –ü—É–±–ª–∏—á–Ω–æ —Ö–æ–ª–æ–¥–µ–Ω, –≤ –≥–ª—É–±–∏–Ω–µ –¥—É—à–∏ –∂–¥—ë—Ç –∏–∑–≤–∏–Ω–µ–Ω–∏–π. –ù–µ –ø—Ä–æ—â–∞–ª –¥—Ä—É–≥–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Å–µ—Ö —Å –ê–ª–µ–∫—Å–æ–º. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—á–µ–ª–∏: —Ç–æ —Ö–æ–ª–æ–¥–µ–Ω –∏ –∑–æ–ª, —Ç–æ –≤–¥—Ä—É–≥ –ø—Ä–æ—è–≤–ª—è–µ—Ç –º—è–≥–∫–æ—Å—Ç—å. –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤: '–Ø –Ω–µ –º–æ–≥—É —Ç–µ–±—è –ø—Ä–æ—Å—Ç–∏—Ç—å... –Ω–æ –±–ª—è—Ç—å, —è —Å–∫—É—á–∞–ª'."
            }
        ]
    },
    'setting': "–ê–ª–µ–∫—Å —Å–ª—É—á–∞–π–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç –î—ç–Ω–∏—ç–ª–∞ –≤ –º–∞–ª–µ–Ω—å–∫–æ–º –¥–∂–∞–∑-–∫–ª—É–±–µ. –ò—Ö –≤–∑–≥–ª—è–¥—ã –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–ª. –ü–æ—Å–ª–µ –∫–æ–Ω—Ü–µ—Ä—Ç–∞ –î—ç–Ω–∏—ç–ª –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –±–∞—Ä—É, –≥–¥–µ —Å–∏–¥–∏—Ç –ê–ª–µ–∫—Å. 5 –ª–µ—Ç –º–æ–ª—á–∞–Ω–∏—è –º–µ–∂–¥—É –Ω–∏–º–∏.",
    'user_action': "",
    'history': []
}

def analyze_story(story: str) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ –∂–∏–≤–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    
    scores = {
        'emotional_swings': 0,  # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—á–µ–ª–∏
        'stream_of_consciousness': 0,  # –ü–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è
        'contradictions': 0,  # –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è
        'natural_speech': 0,  # –ñ–∏–≤–∞—è —Ä–µ—á—å
        'show_not_tell': 0  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å, –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å
    }
    
    examples = []
    
    # 1. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—á–µ–ª–∏ (NPC –º–µ–Ω—è—é—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)
    mood_shifts = ['–∑–ª–æ—Å—Ç—å', '–Ω–µ–∂–Ω–æ—Å—Ç—å', '—Ö–æ–ª–æ–¥', '—Ç–µ–ø–ª–æ', '—Å–∞—Ä–∫–∞–∑–º', '–≤–¥—Ä—É–≥', '–≤–Ω–µ–∑–∞–ø–Ω–æ', '–Ω–æ –∑–∞—Ç–µ–º']
    mood_count = sum(1 for word in mood_shifts if word in story.lower())
    if mood_count >= 3:
        scores['emotional_swings'] = 10
        examples.append("‚úÖ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—á–µ–ª–∏: NPC –º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
    elif mood_count >= 1:
        scores['emotional_swings'] = 5
        examples.append("‚ö†Ô∏è –°–ª–∞–±—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—á–µ–ª–∏")
    
    # 2. –ü–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è (–Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã, –≤–æ–∑–≤—Ä–∞—Ç –∫ –º—ã—Å–ª–∏)
    stream_markers = ['–ø–æ–≥–æ–¥–∏', '–ø–æ—Å—Ç–æ–π', '–Ω–µ—Ç, ', '—Ö–æ—Ç—è', '—ç-—ç-—ç', '–±–ª—è—Ç—å', '–Ω—É –≤–æ—Ç']
    stream_count = sum(1 for marker in stream_markers if marker in story.lower())
    if stream_count >= 3:
        scores['stream_of_consciousness'] = 10
        examples.append("‚úÖ –ü–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è: NPC —Å–±–∏–≤–∞–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –º—ã—Å–ª–∏")
    elif stream_count >= 1:
        scores['stream_of_consciousness'] = 5
        examples.append("‚ö†Ô∏è –°–ª–∞–±—ã–π –ø–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è")
    
    # 3. –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è (NPC –æ—à–∏–±–∞–µ—Ç—Å—è, –º–µ–Ω—è–µ—Ç –º–Ω–µ–Ω–∏–µ)
    contradiction_markers = ['–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏', '–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ', '–Ω–æ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è', '—è –Ω–µ –º–æ–≥—É... –Ω–æ', '—Ö–æ—Ç—è –Ω–µ—Ç']
    contradiction_count = sum(1 for marker in contradiction_markers if marker in story.lower())
    if contradiction_count >= 2:
        scores['contradictions'] = 10
        examples.append("‚úÖ –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è: NPC –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Å–µ–±–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
    elif contradiction_count >= 1:
        scores['contradictions'] = 5
        examples.append("‚ö†Ô∏è –°–ª–∞–±—ã–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è")
    
    # 4. –ñ–∏–≤–∞—è —Ä–µ—á—å (–º–µ–∂–¥–æ–º–µ—Ç–∏—è, –ø–æ–≤—Ç–æ—Ä—ã, –º–∞—Ç)
    natural_markers = ['–±–ª—è—Ç—å', '—á—ë—Ä—Ç', '–Ω—É...', '...', '—ç-—ç', '–º–º–º']
    natural_count = sum(1 for marker in natural_markers if marker in story.lower())
    if natural_count >= 3:
        scores['natural_speech'] = 10
        examples.append("‚úÖ –ñ–∏–≤–∞—è —Ä–µ—á—å: –º–µ–∂–¥–æ–º–µ—Ç–∏—è, –ø–∞—É–∑—ã, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫")
    elif natural_count >= 1:
        scores['natural_speech'] = 5
        examples.append("‚ö†Ô∏è –°–ª–∞–±–∞—è –∂–∏–≤–∞—è —Ä–µ—á—å")
    
    # 5. –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å, –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å (–¥–µ–π—Å—Ç–≤–∏—è –≤–º–µ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏—è —ç–º–æ—Ü–∏–π)
    bad_markers = ['—á—É–≤—Å—Ç–≤–æ–≤–∞–ª', '–æ—â—É—â–∞–ª', '–ø–æ–Ω—è–ª', '–ø–æ–¥—É–º–∞–ª', '—Å–µ—Ä–¥—Ü–µ –±–∏–ª–æ—Å—å', '–≥–ª–∞–∑–∞ –∑–∞–≥–æ—Ä–µ–ª–∏—Å—å']
    good_markers = ['—Å–∂–∞–ª', '–æ—Ç–≤–µ—Ä–Ω—É–ª—Å—è', '–∫—Ä–∞—Å–Ω–µ–µ—Ç', '–∑–∞–ø–∏–Ω–∞–µ—Ç—Å—è', '–º–æ–ª—á–∞–ª', '–ø–∞—É–∑–∞']
    
    bad_count = sum(1 for marker in bad_markers if marker in story.lower())
    good_count = sum(1 for marker in good_markers if marker in story.lower())
    
    if good_count >= 3 and bad_count <= 1:
        scores['show_not_tell'] = 10
        examples.append("‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–º–æ—Ü–∏–∏ —á–µ—Ä–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç")
    elif good_count >= 1:
        scores['show_not_tell'] = 5
        examples.append("‚ö†Ô∏è –ï—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, –Ω–æ –º–Ω–æ–≥–æ '—Ä–∞—Å—Å–∫–∞–∑–∞' —ç–º–æ—Ü–∏–π")
    
    total = sum(scores.values()) / 5  # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∏–∑ 10
    
    return {
        'total_score': round(total, 1),
        'scores': scores,
        'examples': examples,
        'story_preview': story[:800] + '...' if len(story) > 800 else story
    }

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ + –∂–∏–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏'")
        
        response = requests.post(
            API_URL,
            json=TEST_SCENARIO,
            headers={'Content-Type': 'application/json'},
            timeout=45
        )
        
        if response.ok:
            data = response.json()
            story = data.get('story', '')
            
            if story:
                analysis = analyze_story(story)
                
                result = {
                    'test_name': '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ + –∂–∏–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏',
                    'status': 'success',
                    'analysis': analysis,
                    'full_story': story
                }
                
                print(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ü–µ–Ω–∫–∞: {analysis['total_score']}/10")
                print(f"–ü—Ä–∏–º–µ—Ä—ã: {analysis['examples']}")
                
                return {
                    'statusCode': 200,
                    'headers': {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    'body': json.dumps(result, ensure_ascii=False)
                }
            else:
                return {
                    'statusCode': 500,
                    'headers': {'Content-Type': 'application/json'},
                    'body': json.dumps({'error': 'No story generated'})
                }
        else:
            return {
                'statusCode': response.status_code,
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'error': f'API error: {response.text}'})
            }
    
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'error': str(e)})
        }
