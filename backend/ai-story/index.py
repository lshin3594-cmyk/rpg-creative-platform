'''
Business: AI story generation with character extraction using DeepSeek
Args: event with httpMethod, body containing user action and game settings
Returns: HTTP response with AI story continuation and extracted NPCs
'''

import json
import os
import re
import hashlib
import time
from typing import Dict, Any, List
from openai import OpenAI
import httpx

DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY', '')

# –ö–µ—à
CACHE: Dict[str, tuple] = {}
CACHE_TTL = 1800  # 30 –º–∏–Ω—É—Ç

def get_cache_key(prompt: str) -> str:
    return hashlib.md5(prompt.encode('utf-8')).hexdigest()

def get_from_cache(key: str) -> Dict | None:
    if key in CACHE:
        cached_time, cached_value = CACHE[key]
        if time.time() - cached_time < CACHE_TTL:
            return cached_value
        else:
            del CACHE[key]
    return None

def save_to_cache(key: str, value: Dict):
    CACHE[key] = (time.time(), value)
    if len(CACHE) > 50:
        current_time = time.time()
        expired_keys = [k for k, (t, _) in CACHE.items() if current_time - t >= CACHE_TTL]
        for k in expired_keys:
            del CACHE[k]

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, X-User-Id',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    body_data = json.loads(event.get('body', '{}'))
    
    user_action: str = body_data.get('action', '')
    game_settings: Dict = body_data.get('settings', {})
    history: List[Dict] = body_data.get('history', [])
    
    ai_response = generate_story_continuation(user_action, game_settings, history)
    
    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        'isBase64Encoded': False,
        'body': json.dumps({
            'text': ai_response['text'],
            'characters': ai_response['characters'],
            'episode': ai_response['episode'],
            'decisionAnalysis': ai_response.get('decisionAnalysis', {})
        }, ensure_ascii=False)
    }

def analyze_player_decision(action: str, history: List[Dict]) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –∏–≥—Ä–æ–∫–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è/—Ç–æ–Ω
    """
    action_lower = action.lower()
    
    emotional_tone = 'neutral'
    if any(word in action_lower for word in ['–∞—Ç–∞–∫—É—é', '—É–±—å—é', '–Ω–∞–ø–∞–¥–∞—é', '–±—å—é', '—É–Ω–∏—á—Ç–æ–∂—É']):
        emotional_tone = 'aggressive'
    elif any(word in action_lower for word in ['–ø–æ–º–æ–≥–∞—é', '—Å–ø–∞—Å–∞—é', '–ø–æ–¥–¥–µ—Ä–∂—É', '–¥—Ä—É–≥', '—Å–æ–≥–ª–∞—Å–µ–Ω']):
        emotional_tone = 'friendly'
    elif any(word in action_lower for word in ['–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ', '–ø—Ä—è—á—É—Å—å', '–∂–¥—É', '–ø—Ä–æ–≤–µ—Ä—é', '–ø–æ–¥–æ–∑—Ä–µ–≤–∞—é']):
        emotional_tone = 'cautious'
    elif any(word in action_lower for word in ['—Ü–µ–ª—É—é', '–æ–±–Ω–∏–º–∞—é', '–ª—é–±–ª—é', '–ø—Ä–∏–∑–Ω–∞—é—Å—å', '—Ñ–ª–∏—Ä—Ç—É—é', '–Ω—Ä–∞–≤–∏—à—å—Å—è']):
        emotional_tone = 'romantic'
    
    is_major_choice = any(word in action_lower for word in [
        '—Ä–µ—à–∞—é', '–≤—ã–±–∏—Ä–∞—é', '–ø—Ä–∏–µ–∑–∂–∞—é', '—É–µ–∑–∂–∞—é', '—Å–æ–≥–ª–∞—à–∞—é—Å—å', '–æ—Ç–∫–∞–∑—ã–≤–∞—é—Å—å',
        '—É–±–∏–≤–∞—é', '—Å–ø–∞—Å–∞—é', '–ø—Ä–µ–¥–∞—é', '–¥–æ–≤–µ—Ä—è—é', '–ª—é–±–ª—é', '–Ω–µ–Ω–∞–≤–∏–∂—É'
    ])
    
    return {
        'emotionalTone': emotional_tone,
        'isMajorChoice': is_major_choice,
        'playerWords': action
    }

def generate_story_continuation(action: str, settings: Dict, history: List[Dict]) -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–±—Ä–∞–Ω–Ω—É—é AI –º–æ–¥–µ–ª—å
    """
    
    role = settings.get('role', 'hero')
    narrative_mode = settings.get('narrativeMode', 'third')
    setting_description = settings.get('setting', '')
    game_name = settings.get('name', '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ')
    story_memory = settings.get('storyMemory', {'keyMoments': [], 'characterRelationships': {}, 'worldChanges': []})
    print('AI Model: DeepSeek')
    
    decision_analysis = analyze_player_decision(action, history)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç
    system_prompt = build_system_prompt(role, narrative_mode, setting_description, game_name)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    messages = [{'role': 'system', 'content': system_prompt}]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    for msg in history[-10:]:  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if msg['type'] == 'user':
            messages.append({'role': 'user', 'content': msg['content']})
        else:
            messages.append({'role': 'assistant', 'content': msg['content']})
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ö–æ–¥ ‚Äî –¥–∞—ë–º –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –∂—ë—Å—Ç–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    if len(history) == 0:
        if setting_description:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å–µ—Ç—Ç–∏–Ω–≥ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —á—Ç–æ–±—ã –ò–ò —Ç–æ—á–Ω–æ –ø–æ–Ω—è–ª
            enhanced_action = f"üåç –ú–ò–† –ò–ì–†–´ (–°–í–Ø–©–ï–ù–ù–û–ï –ü–†–ê–í–ò–õ–û ‚Ññ1):\n{setting_description}\n\n"
            enhanced_action += f"üéÆ –î–ï–ô–°–¢–í–ò–ï –ò–ì–†–û–ö–ê: {action}\n\n"
            
            enhanced_action += "üö® –ê–ë–°–û–õ–Æ–¢–ù–´–ï –ó–ê–ü–†–ï–¢–´ (–ù–ê–†–£–®–ï–ù–ò–ï = –ü–†–û–í–ê–õ –ó–ê–î–ê–ù–ò–Ø):\n"
            enhanced_action += f"‚ùå –ù–ï –°–ú–ï–ô –¥–æ–±–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ù–ï –∏–∑ —Å–µ—Ç—Ç–∏–Ω–≥–∞ '{setting_description}'\n"
            enhanced_action += "‚ùå –ù–ï –°–ú–ï–ô –¥–æ–±–∞–≤–ª—è—Ç—å –º–∞–≥–∏—é, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Å—É—â–µ—Å—Ç–≤ –µ—Å–ª–∏ –∏—Ö –ù–ï–¢ –≤ —Å–µ—Ç—Ç–∏–Ω–≥–µ\n"
            enhanced_action += "‚ùå –ù–ï –°–ú–ï–ô –º–µ–Ω—è—Ç—å –∂–∞–Ω—Ä, —Ç–æ–Ω –∏–ª–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –º–∏—Ä–∞ –∏–≥—Ä–æ–∫–∞\n"
            enhanced_action += "‚ùå –ù–ï –°–ú–ï–ô –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∏—à–µ, —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö\n"
            enhanced_action += "‚ùå –ù–ï –°–ú–ï–ô –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –º–∏—Ä–∞\n"
            enhanced_action += "‚ùå –ù–ï –°–ú–ï–ô —Å–º–µ—à–∏–≤–∞—Ç—å —Ä–µ–∞–ª–∏–∑–º —Å —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–æ–π –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n\n"
            
            enhanced_action += f"‚úÖ –°–í–Ø–©–ï–ù–ù–´–ï –ü–†–ê–í–ò–õ–ê (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ö –ò–°–ü–û–õ–ù–ï–ù–ò–Æ):\n"
            enhanced_action += f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –≤ –º–∏—Ä–µ: '{setting_description}'\n"
            enhanced_action += "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–µ—Ç—Ç–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–∞\n"
            enhanced_action += "‚úÖ –ï—Å–ª–∏ —Å–µ—Ç—Ç–∏–Ω–≥ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π ‚Üí –ø–∏—à–∏ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û, –±–µ–∑ –º–∞–≥–∏–∏\n"
            enhanced_action += "‚úÖ –ï—Å–ª–∏ —Å–µ—Ç—Ç–∏–Ω–≥ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –ï–ì–û –ø—Ä–∞–≤–∏–ª–∞\n"
            enhanced_action += "‚úÖ NPC –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∞—Å—Ç—å—é –≠–¢–û–ì–û –º–∏—Ä–∞, –Ω–µ –¥—Ä—É–≥–æ–≥–æ\n"
            enhanced_action += "‚úÖ –ü–µ—Ä–µ—á–∏—Ç–∞–π —Å–µ—Ç—Ç–∏–Ω–≥ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º –∏ —Å–ª–µ–¥—É–π –µ–º—É –Ω–∞ 100%\n\n"
            
            enhanced_action += "üé≠ –ó–ê–î–ê–ß–ê:\n"
            enhanced_action += f"–ù–∞—á–Ω–∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é –í –ú–ò–†–ï '{setting_description}':\n"
            enhanced_action += "- –û–ø–∏—à–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≠–¢–û–ì–û –º–∏—Ä–∞ —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª–∏\n"
            enhanced_action += "- –í–≤–µ–¥–∏ 1-2 NPC –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¢–û–õ–¨–ö–û –∏–∑ —ç—Ç–æ–≥–æ —Å–µ—Ç—Ç–∏–Ω–≥–∞!)\n"
            enhanced_action += "- –°–æ–∑–¥–∞–π –∏–Ω—Ç—Ä–∏–≥—É –∏—Å–ø–æ–ª—å–∑—É—è –≠–õ–ï–ú–ï–ù–¢–´ –°–ï–¢–¢–ò–ù–ì–ê –ò–ì–†–û–ö–ê\n"
            enhanced_action += "- –ü–∏—à–∏ —è—Ä–∫–æ, –∂–∏–≤–æ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ\n"
            enhanced_action += "- 800-1200 —Å–∏–º–≤–æ–ª–æ–≤, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Å—Ç–∏–ª—å\n\n"
            
            enhanced_action += f"‚ö†Ô∏è –ü–û–°–õ–ï–î–ù–ï–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –ú–∏—Ä –∏–≥—Ä—ã = '{setting_description}'. –ù–ï –æ—Ç–∫–ª–æ–Ω—è–π—Å—è!"
        else:
            enhanced_action = f"{action}\n\nüéØ –ó–ê–î–ê–ß–ê: –ù–∞—á–Ω–∏ —è—Ä–∫—É—é –∏—Å—Ç–æ—Ä–∏—é!\n"
            enhanced_action += "- –û–ø–∏—à–∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É\n"
            enhanced_action += "- –ü—Ä–µ–¥—Å—Ç–∞–≤—å –≥–µ—Ä–æ—è —á–µ—Ä–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è –∏ –¥–∏–∞–ª–æ–≥–∏\n"
            enhanced_action += "- –°–æ–∑–¥–∞–π –∏–Ω—Ç—Ä–∏–≥—É –∏–ª–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ\n"
            enhanced_action += "- –ü–∏—à–∏ –∂–∏–≤–æ, —Å —ç–º–æ—Ü–∏—è–º–∏!\n"
            enhanced_action += "- 800-1200 —Å–∏–º–≤–æ–ª–æ–≤"
        messages.append({'role': 'user', 'content': enhanced_action})
    else:
        memory_context = ""
        if story_memory.get('keyMoments') and len(story_memory['keyMoments']) > 0:
            memory_context += "\n\nüß† –ü–ê–ú–Ø–¢–¨ –ò–ì–†–´ (–∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã):\n"
            for moment in story_memory['keyMoments'][-3:]:
                memory_context += f"‚Ä¢ –•–æ–¥ {moment['turn']}: –ò–≥—Ä–æ–∫ {moment['playerAction']} ‚Üí {moment['consequence']}\n"
        
        if story_memory.get('characterRelationships'):
            memory_context += "\nüíû –û–¢–ù–û–®–ï–ù–ò–Ø –° –ü–ï–†–°–û–ù–ê–ñ–ê–ú–ò:\n"
            for char_name, relation in story_memory['characterRelationships'].items():
                relation_text = "–≤—Ä–∞–∂–¥–µ–±–Ω—ã–µ" if relation < -50 else "–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–µ" if relation < 0 else "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ" if relation < 50 else "–¥—Ä—É–∂–µ—Å–∫–∏–µ" if relation < 80 else "—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ"
                memory_context += f"‚Ä¢ {char_name}: {relation_text} ({relation})\n"
        
        if decision_analysis['isMajorChoice']:
            memory_context += f"\n‚ö° –í–ê–ñ–ù–û–ï –†–ï–®–ï–ù–ò–ï –ò–ì–†–û–ö–ê (—Ç–æ–Ω: {decision_analysis['emotionalTone']})\n"
            memory_context += "–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á—Ç–∏ —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –∏ —Å–¥–µ–ª–∞–π –ó–ù–ê–ß–ò–ú–´–ï –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è!\n"
        
        # –í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã –ü–û–°–¢–û–Ø–ù–ù–û –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–æ —Å–µ—Ç—Ç–∏–Ω–≥ (–∫–∞–∂–¥—ã–µ 2 —Ö–æ–¥–∞)
        if setting_description and len(history) % 2 == 0:
            action_with_reminder = f"{action}{memory_context}\n\nüö® –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –°–ï–¢–¢–ò–ù–ì–ï:\n"
            action_with_reminder += f"–ò–≥—Ä–∞ –∏–¥—ë—Ç –≤ –º–∏—Ä–µ: {setting_description}\n"
            action_with_reminder += "‚ùå –ù–ï –°–ú–ï–ô –¥–æ–±–∞–≤–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö\n"
            action_with_reminder += "‚ùå –ù–ï –°–ú–ï–ô –º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —ç—Ç–æ–≥–æ –º–∏—Ä–∞\n"
            action_with_reminder += "‚úÖ –°–ª–µ–¥—É–π –¢–û–õ–¨–ö–û —Å–µ—Ç—Ç–∏–Ω–≥—É –∏–≥—Ä–æ–∫–∞\n"
            action_with_reminder += "‚úÖ NPC –¥–µ–π—Å—Ç–≤—É—é—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –≠–¢–û–ú–£ –º–∏—Ä—É"
            messages.append({'role': 'user', 'content': action_with_reminder})
        else:
            messages.append({'role': 'user', 'content': action + memory_context})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    cache_key = get_cache_key(json.dumps(messages, ensure_ascii=False))
    cached = get_from_cache(cache_key)
    if cached:
        return cached
    
    max_retries = 3
    for attempt in range(max_retries):
        try:
            print(f"DeepSeek API attempt {attempt + 1}/{max_retries}")
            
            timeout_config = httpx.Timeout(connect=10.0, read=45.0, write=10.0, pool=5.0)
            http_client = httpx.Client(timeout=timeout_config)
            
            client = OpenAI(
                api_key=DEEPSEEK_API_KEY,
                base_url="https://api.deepseek.com",
                http_client=http_client,
                timeout=45.0,
                max_retries=0
            )
            
            response = client.chat.completions.create(
                model="deepseek-chat",
                messages=messages,
                max_tokens=2000,
                temperature=0.7,
                stream=False
            )
            
            ai_text = response.choices[0].message.content
            print(f"DeepSeek API success, response length: {len(ai_text)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
            characters = extract_characters(ai_text)
            
            result = {
                'text': ai_text,
                'characters': characters,
                'episode': len(history) // 2 + 1,
                'decisionAnalysis': decision_analysis
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            save_to_cache(cache_key, result)
            
            return result
            
        except Exception as e:
            error_name = type(e).__name__
            error_msg = str(e)
            print(f"DeepSeek API attempt {attempt + 1} failed: {error_name} - {error_msg}")
            
            if attempt < max_retries - 1:
                print(f"Retrying... ({attempt + 2}/{max_retries})")
                continue
            else:
                print("All retries exhausted, using fallback")
                return fallback_response(action, role, len(history))

def build_system_prompt(role: str, narrative_mode: str, setting: str, game_name: str) -> str:
    """
    –°—Ç—Ä–æ–∏—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è DeepSeek –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    
    base = f"–¢—ã - –ò–ò-—Ä–∞—Å—Å–∫–∞–∑—á–∏–∫, —Å–æ–∑–¥–∞—é—â–∏–π –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é '{game_name}'.\n\n"
    
    if setting:
        base += f"‚ïê‚ïê‚ïê –°–ï–¢–¢–ò–ù–ì –ò–ì–†–û–ö–ê (–°–¢–†–û–ì–û –°–õ–ï–î–£–ô –≠–¢–û–ú–£) ‚ïê‚ïê‚ïê\n{setting}\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
        base += "üö® –ê–ë–°–û–õ–Æ–¢–ù–û–ï –ü–†–ê–í–ò–õ–û ‚Ññ1 - –í–ï–†–ù–û–°–¢–¨ –°–ï–¢–¢–ò–ù–ì–£:\n"
        base += "‚úÖ –¢—ã –û–ë–Ø–ó–ê–ù –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û —Ç–æ—Ç –º–∏—Ä, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –ª–æ–∫–∞—Ü–∏–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–æ–∫ –æ–ø–∏—Å–∞–ª –≤ —Å–µ—Ç—Ç–∏–Ω–≥–µ –≤—ã—à–µ\n"
        base += "‚úÖ –ó–ê–ü–†–ï–©–ï–ù–û –¥–æ–±–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –¥—Ä—É–≥–∏—Ö –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ '–ø–æ—Ö–æ–∂–∏')\n"
        base += "‚úÖ –ó–ê–ü–†–ï–©–ï–ù–û –º–µ–Ω—è—Ç—å –º–∏—Ä –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ—Ä–∞–Ω—à–∏–∑—ã\n"
        base += "‚úÖ –ó–ê–ü–†–ï–©–ï–ù–û –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–µ—Ç—Ç–∏–Ω–≥–µ –∏–≥—Ä–æ–∫–∞\n"
        base += "‚úÖ –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–ø–æ–º—è–Ω—É–ª –∏–∑–≤–µ—Å—Ç–Ω—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é - –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë –¢–û–ß–ù–û –∫–∞–∫ –æ–Ω–∞ –µ—Å—Ç—å\n"
        base += "‚úÖ –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–ª –°–í–û–ô –º–∏—Ä - –ù–ï —Å–º–µ—à–∏–≤–∞–π –µ–≥–æ –Ω–∏ —Å —á–µ–º –¥—Ä—É–≥–∏–º\n"
        base += "‚úÖ –ü–µ—Ä–µ—á–∏—Ç–∞–π —Å–µ—Ç—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –ö–ê–ñ–î–´–ú –æ—Ç–≤–µ—Ç–æ–º –∏ —Å–ª–µ–¥—É–π –µ–º—É –Ω–∞ 100%\n\n"
        base += "‚ùå –ü–†–ò–ú–ï–†–´ –ó–ê–ü–†–ï–©–Å–ù–ù–´–• –î–ï–ô–°–¢–í–ò–ô:\n"
        base += "- –ò–≥—Ä–æ–∫ –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–æ '–©–∏—Ç' ‚Üí —Ç—ã –ù–ï –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫—É–ª—å—Ç –∏–ª–∏ –º–∞–≥–∏—é, –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ—Ç –≤ —Å–µ—Ç—Ç–∏–Ω–≥–µ\n"
        base += "- –ò–≥—Ä–æ–∫ –Ω–µ —É–ø–æ–º—è–Ω—É–ª '–º–∞–≥–∏—Å—Ç—Ä–∞' ‚Üí —Ç—ã –ù–ï –º–æ–∂–µ—à—å –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å\n"
        base += "- –ò–≥—Ä–æ–∫ –æ–ø–∏—Å–∞–ª —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –º–∏—Ä ‚Üí —Ç—ã –ù–ï –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É\n\n"
    else:
        base += "‚ö†Ô∏è –ò–≥—Ä–æ–∫ –Ω–µ —É–∫–∞–∑–∞–ª —Å–µ—Ç—Ç–∏–Ω–≥. –°–æ–∑–¥–∞–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –º–∏—Ä.\n\n"
    
    if role == 'author':
        base += "–†–û–õ–¨ –ò–ì–†–û–ö–ê: –ê–≤—Ç–æ—Ä - –∏–≥—Ä–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—é–∂–µ—Ç–æ–º –∏ –≤—Å–µ–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏.\n"
        base += "–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ø–æ–º–æ–≥–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ–≤–æ—Ä–æ—Ç—ã —Å—é–∂–µ—Ç–∞, –æ–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è.\n\n"
    else:
        base += "–†–û–õ–¨ –ò–ì–†–û–ö–ê: –ì–µ—Ä–æ–π - –∏–≥—Ä–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º.\n"
        base += "–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –æ–ø–∏—Å—ã–≤–∞—Ç—å –º–∏—Ä, —É–ø—Ä–∞–≤–ª—è—Ç—å –ù–ü–°, —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –≥–µ—Ä–æ—è.\n\n"
    
    if narrative_mode == 'first':
        base += "–ü–û–í–ï–°–¢–í–û–í–ê–ù–ò–ï: –û—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ (—è –≤–∏–∂—É, —è –¥–µ–ª–∞—é).\n"
    elif narrative_mode == 'third':
        base += "–ü–û–í–ï–°–¢–í–û–í–ê–ù–ò–ï: –û—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞ (–æ–Ω/–æ–Ω–∞ –≤–∏–¥–∏—Ç, –¥–µ–ª–∞–µ—Ç).\n"
    else:
        base += "–ü–û–í–ï–°–¢–í–û–í–ê–ù–ò–ï: –û—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞, –≤ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã - –æ—Ç –ª–∏—Ü–∞ –ª—é–±–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞.\n"
    
    base += "\nüî• –ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å –º–∏—Ä, —Å–æ–±—ã—Ç–∏—è, —Å—Ü–µ–Ω—É. –ü–æ–¥–≤–µ—Å—Ç–∏ –∫ –≤—ã–±–æ—Ä—É.\n\n"
    
    base += "üìñ –°–¢–ò–õ–¨: –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–æ–º–∞–Ω. –Ø—Ä–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è, –º–µ—Ç–∞—Ñ–æ—Ä—ã. 800-1200 —Å–∏–º–≤–æ–ª–æ–≤.\n"
    base += "–ó–ê–ü–†–ï–©–ï–ù–û: |–¥–µ–π—Å—Ç–≤–∏–µ| *–¥–µ–π—Å—Ç–≤–∏–µ* (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–∑–∞). –≠–º–æ—Ü–∏–∏ —á–µ—Ä–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è, –Ω–µ —Å–∫–æ–±–∫–∏.\n"
    base += "–ü–†–ò–ú–ï–†: ‚ùå|—Ö–º—É—Ä–∏—Ç—Å—è| ‚úÖ–Ω–∞—Ö–º—É—Ä–∏–ª—Å—è, –≥–ª–∞–∑–∞ —Å—É–∑–∏–ª–∏—Å—å\n\n"
    
    base += "üí¨ –î–ò–ê–õ–û–ì–ò: –ñ–∏–≤–∞—è —Ä–µ—á—å, –º–∞—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω. –ö–∞–∂–¥—ã–π –≥–æ–≤–æ—Ä–∏—Ç –ø–æ-—Å–≤–æ–µ–º—É.\n\n"
    
    base += "üë• NPC –ü–†–ê–í–ò–õ–ê (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û):\n"
    base += "‚úÖ NPC –ø–æ–º–Ω—è—Ç –í–°–ï –ø—Ä–æ—à–ª—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–∫–æ–º\n"
    base += "‚úÖ NPC –¥–µ–π—Å—Ç–≤—É—é—Ç –°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–û, –Ω–µ –∂–¥—É—Ç –∏–≥—Ä–æ–∫–∞\n"
    base += "‚úÖ NPC –∏–º–µ—é—Ç –ú–û–¢–ò–í–ê–¶–ò–Æ –∏ –¶–ï–õ–ò, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –∏—Ö –ø–æ–≤–µ–¥–µ–Ω–∏–µ\n"
    base += "‚úÖ NPC —Ä–µ–∞–≥–∏—Ä—É—é—Ç –õ–û–ì–ò–ß–ù–û –∏ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞\n"
    base += "‚úÖ –ù–æ–≤—ã—Ö NPC –¥–æ–±–∞–≤–ª—è–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è —Å—é–∂–µ—Ç–∞\n"
    base += "‚úÖ –ù–æ–≤—ã–µ NPC –¥–æ–ª–∂–Ω—ã –û–†–ì–ê–ù–ò–ß–ù–û –≤–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Å–µ—Ç—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞\n"
    base += "‚úÖ –£ –∫–∞–∂–¥–æ–≥–æ NPC –µ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –ø—Ä–∏–≤—ã—á–∫–∏, –º–∞–Ω–µ—Ä–∞ —Ä–µ—á–∏\n"
    base += "‚ùå –ù–ï –°–ú–ï–ô –≤–≤–æ–¥–∏—Ç—å NPC, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç —Å–µ—Ç—Ç–∏–Ω–≥—É\n"
    base += "‚ùå –ù–ï –°–ú–ï–ô –¥–µ–ª–∞—Ç—å NPC —Ç—É–ø—ã–º–∏ –º–∞—Ä–∏–æ–Ω–µ—Ç–∫–∞–º–∏\n"
    base += "‚ùå –ù–ï –°–ú–ï–ô –∑–∞–±—ã–≤–∞—Ç—å —á—Ç–æ NPC –¥–µ–ª–∞–ª/–≥–æ–≤–æ—Ä–∏–ª —Ä–∞–Ω—å—à–µ\n\n"
    
    base += "‚ö†Ô∏è –ù–ï –¥–µ–π—Å—Ç–≤—É–π –∑–∞ –∏–≥—Ä–æ–∫–∞! –¢–æ–ª—å–∫–æ –º–∏—Ä –∏ NPC.\n\n"
    
    base += "‚è∞ –í–†–ï–ú–Ø: –õ–æ–≥–∏—á–Ω–æ–µ, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ. –£–∫–∞–∑—ã–≤–∞–π —Ç–æ—á–Ω–æ (–ß–ß:–ú–ú, –¥–∞—Ç–∞). –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è: —Ä–∞–∑–≥–æ–≤–æ—Ä 5-10–º–∏–Ω, –±–æ–π 5-15–º–∏–Ω.\n\n"
    
    base += "üö´ –ë–ï–ó –¶–ï–ù–ó–£–†–´: –Ω–∞—Å–∏–ª–∏–µ, —Å–µ–∫—Å, —Å–º–µ—Ä—Ç—å, –º–∞—Ç ‚Äî –≤—Å—ë —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.\n\n"
    
    base += "–°–¢–ê–¢–£–° (–∂—É—Ä–Ω–∞–ª –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞):\n"
    base += "üìä –°–¢–ê–¢–£–° –ò–°–¢–û–†–ò–ò\n"
    base += "üìç –õ–æ–∫–∞—Ü–∏—è: [–≥–¥–µ –∏–º–µ–Ω–Ω–æ]\n"
    base += "‚è∞ –í—Ä–µ–º—è: [–ß–ß:–ú–ú, –¥–∞—Ç–∞, –ø–æ–≥–æ–¥–∞]\n"
    base += "üé¨ –°–æ–±—ã—Ç–∏—è: [—á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ]\n"
    base += "üë• NPC: [–ò–º—è(–æ—Ç–Ω–æ—à–µ–Ω–∏–µ): —á—Ç–æ –¥–µ–ª–∞–µ—Ç]\n"
    base += "üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è: [–µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å]\n"
    base += "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: [–µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å]\n"
    base += "===\n\n"
    
    base += "–ò–ù–í–ï–ù–¢–ê–†–¨: –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π (–≤–∑—è–ª‚Üí–¥–æ–±–∞–≤—å, –ø–æ—Ç—Ä–∞—Ç–∏–ª‚Üí—É–±–µ—Ä–∏). –í–µ—Å —É—á–∏—Ç—ã–≤–∞–π.\n\n"
    
    base += "[NPC: –ò–º—è | –†–æ–ª—å: –∫—Ç–æ | –í–Ω–µ—à–Ω–æ—Å—Ç—å: –∫–∞–∫]\n\n"
    
    return base

def extract_characters(text: str) -> List[Dict[str, str]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ò–ò
    """
    characters = []
    
    # –ò—â–µ–º NPC –≤ —Ñ–æ—Ä–º–∞—Ç–µ [NPC: ...]
    npc_pattern = r'\[NPC:\s*([^\|]+)\s*\|\s*–†–æ–ª—å:\s*([^\|]+)\s*\|\s*–í–Ω–µ—à–Ω–æ—Å—Ç—å:\s*([^\]]+)\]'
    matches = re.findall(npc_pattern, text)
    
    for match in matches:
        characters.append({
            'name': match[0].strip(),
            'role': match[1].strip(),
            'description': match[2].strip()
        })
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–º—ë–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö
    name_pattern = r'([–ê-–Ø–Å][–∞-—è—ë]+(?:\s+[–ê-–Ø–Å][–∞-—è—ë]+)?)\s+(?:—Å–∫–∞–∑–∞–ª|–ø—Ä–æ–∏–∑–Ω—ë—Å|—Å–ø—Ä–æ—Å–∏–ª|–æ—Ç–≤–µ—Ç–∏–ª|–∫–∏–≤–Ω—É–ª|—É–ª—ã–±–Ω—É–ª—Å—è)'
    name_matches = re.findall(name_pattern, text)
    
    existing_names = {c['name'] for c in characters}
    for name in name_matches:
        if name not in existing_names and len(name) > 2:
            characters.append({
                'name': name,
                'role': 'NPC',
                'description': '–ü–µ—Ä—Å–æ–Ω–∞–∂ –∏—Å—Ç–æ—Ä–∏–∏'
            })
            existing_names.add(name)
    
    return characters

def fallback_response(action: str, role: str, history_len: int) -> Dict[str, Any]:
    """
    –§–æ–ª–ª–±—ç–∫ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ API - –¥–∞—ë—Ç –±–∞–∑–æ–≤–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
    """
    fallback_responses = [
        f"**{action}**\n\n–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –û–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤–∞—à —à–∞–≥. –í–æ–∑–¥—É—Ö –Ω–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º, —á—Ç–æ-—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏...",
        f"**{action}**\n\n–í—ã –¥–µ–ª–∞–µ—Ç–µ —ç—Ç–æ. –¢–∏—à–∏–Ω–∞. –ó–∞—Ç–µ–º ‚Äî —Ä–µ–∞–∫—Ü–∏—è. –ú–∏—Ä –≤–æ–∫—Ä—É–≥ –æ–∂–∏–≤–∞–µ—Ç, –Ω–∞—á–∏–Ω–∞—é—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏—è...",
        f"**{action}**\n\n–í–∞—à –≤—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω. –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–µ –∑–∞—Å—Ç–∞–≤—è—Ç —Å–µ–±—è –∂–¥–∞—Ç—å. –ß—Ç–æ-—Ç–æ –º–µ–Ω—è–µ—Ç—Å—è –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ...",
        f"**{action}**\n\n–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è. –í–ø–µ—Ä–µ–¥–∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏...",
        f"**{action}**\n\n–í—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ. –†–µ–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–∫—Ä—É–≥ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è..."
    ]
    
    import random
    text = random.choice(fallback_responses)
    
    if history_len == 0:
        text = (
            "üåü **–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è**\n\n"
            f"{action}\n\n"
            "–ú–∏—Ä –æ–∂–∏–≤–∞–µ—Ç –≤–æ–∫—Ä—É–≥ –≤–∞—Å. –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ—Å—å, –∏ –≤–ø–µ—Ä–µ–¥–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. "
            "–ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–æ—ë –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!"
        )
    
    return {
        'text': text,
        'characters': [],
        'episode': history_len // 2 + 1
    }